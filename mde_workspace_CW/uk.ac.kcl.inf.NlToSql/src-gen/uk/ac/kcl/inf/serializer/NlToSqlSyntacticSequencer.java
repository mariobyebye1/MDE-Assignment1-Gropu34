/*
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import uk.ac.kcl.inf.services.NlToSqlGrammarAccess;

@SuppressWarnings("all")
public class NlToSqlSyntacticSequencer extends AbstractSyntacticSequencer {

	protected NlToSqlGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Comparison___AKeyword_0_1_or_TheKeyword_0_0__q;
	protected AbstractElementAlias match_InsertStatement_UpdateStatement___InsertKeyword_0_IntoKeyword_1_TheTableParserRuleCall_2___or___UpdateKeyword_0_TheTableParserRuleCall_1__;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (NlToSqlGrammarAccess) access;
		match_Comparison___AKeyword_0_1_or_TheKeyword_0_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getComparisonAccess().getAKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getComparisonAccess().getTheKeyword_0_0()));
		match_InsertStatement_UpdateStatement___InsertKeyword_0_IntoKeyword_1_TheTableParserRuleCall_2___or___UpdateKeyword_0_TheTableParserRuleCall_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getInsertStatementAccess().getInsertKeyword_0()), new TokenAlias(false, false, grammarAccess.getInsertStatementAccess().getIntoKeyword_1()), new TokenAlias(false, false, grammarAccess.getInsertStatementAccess().getTheTableParserRuleCall_2())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getUpdateStatementAccess().getUpdateKeyword_0()), new TokenAlias(false, false, grammarAccess.getUpdateStatementAccess().getTheTableParserRuleCall_1())));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getLogicOperatorRule())
			return getLogicOperatorToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTheARule())
			return getTheAToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTheTableRule())
			return getTheTableToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * LogicOperator:
	 *     'and' | 'or'
	 * ;
	 */
	protected String getLogicOperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "and";
	}
	
	/**
	 * TheA:
	 * 	('the' | 'a')?
	 * ;
	 */
	protected String getTheAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * TheTable:
	 * 	('the' 'table')?
	 * ;
	 */
	protected String getTheTableToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Comparison___AKeyword_0_1_or_TheKeyword_0_0__q.equals(syntax))
				emit_Comparison___AKeyword_0_1_or_TheKeyword_0_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_InsertStatement_UpdateStatement___InsertKeyword_0_IntoKeyword_1_TheTableParserRuleCall_2___or___UpdateKeyword_0_TheTableParserRuleCall_1__.equals(syntax))
				emit_InsertStatement_UpdateStatement___InsertKeyword_0_IntoKeyword_1_TheTableParserRuleCall_2___or___UpdateKeyword_0_TheTableParserRuleCall_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('the' | 'a')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) leftHandSide=[Column|ID]
	 */
	protected void emit_Comparison___AKeyword_0_1_or_TheKeyword_0_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('Insert' 'into' TheTable) | ('Update' TheTable)
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) table=[Table|ID]
	 */
	protected void emit_InsertStatement_UpdateStatement___InsertKeyword_0_IntoKeyword_1_TheTableParserRuleCall_2___or___UpdateKeyword_0_TheTableParserRuleCall_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
