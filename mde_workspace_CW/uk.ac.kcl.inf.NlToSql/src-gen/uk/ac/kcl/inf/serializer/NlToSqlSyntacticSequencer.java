/*
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import uk.ac.kcl.inf.services.NlToSqlGrammarAccess;

@SuppressWarnings("all")
public class NlToSqlSyntacticSequencer extends AbstractSyntacticSequencer {

	protected NlToSqlGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Comparison___AKeyword_0_1_or_TheKeyword_0_0__q;
	protected AbstractElementAlias match_CreateTableStatement___AKeyword_1_1_or_TheKeyword_1_0__q;
	protected AbstractElementAlias match_SelectStatement___CanKeyword_4_0_YouKeyword_4_1__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (NlToSqlGrammarAccess) access;
		match_Comparison___AKeyword_0_1_or_TheKeyword_0_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getComparisonAccess().getAKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getComparisonAccess().getTheKeyword_0_0()));
		match_CreateTableStatement___AKeyword_1_1_or_TheKeyword_1_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getCreateTableStatementAccess().getAKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getCreateTableStatementAccess().getTheKeyword_1_0()));
		match_SelectStatement___CanKeyword_4_0_YouKeyword_4_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getSelectStatementAccess().getCanKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getSelectStatementAccess().getYouKeyword_4_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getLogicOperatorRule())
			return getLogicOperatorToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * LogicOperator:
	 *     'and' | 'or'
	 * ;
	 */
	protected String getLogicOperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "and";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Comparison___AKeyword_0_1_or_TheKeyword_0_0__q.equals(syntax))
				emit_Comparison___AKeyword_0_1_or_TheKeyword_0_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CreateTableStatement___AKeyword_1_1_or_TheKeyword_1_0__q.equals(syntax))
				emit_CreateTableStatement___AKeyword_1_1_or_TheKeyword_1_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SelectStatement___CanKeyword_4_0_YouKeyword_4_1__q.equals(syntax))
				emit_SelectStatement___CanKeyword_4_0_YouKeyword_4_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('the' | 'a')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) leftHandSide=[Column|ID]
	 */
	protected void emit_Comparison___AKeyword_0_1_or_TheKeyword_0_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('the' | 'a')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'create' (ambiguity) 'table' 'called' table=Table
	 */
	protected void emit_CreateTableStatement___AKeyword_1_1_or_TheKeyword_1_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('can' 'you')?
	 *
	 * This ambiguous syntax occurs at:
	 *     selectTable+=[Table|ID] (ambiguity) 'show' 'all' 'columns' '.' (rule end)
	 *     selectTable+=[Table|ID] (ambiguity) 'show' 'all' 'columns' 'group' 'by' groupByList+=Column
	 *     selectTable+=[Table|ID] (ambiguity) 'show' 'all' 'columns' 'where' condition=Condition
	 *     selectTable+=[Table|ID] (ambiguity) 'show' 'all' 'columns' (rule end)
	 *     selectTable+=[Table|ID] (ambiguity) 'show' 'the' 'columns:' columns=SelectColumnsList
	 */
	protected void emit_SelectStatement___CanKeyword_4_0_YouKeyword_4_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
