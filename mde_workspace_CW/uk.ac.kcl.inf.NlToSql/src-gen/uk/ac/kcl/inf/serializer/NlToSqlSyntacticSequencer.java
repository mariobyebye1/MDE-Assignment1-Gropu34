/*
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import uk.ac.kcl.inf.services.NlToSqlGrammarAccess;

@SuppressWarnings("all")
public class NlToSqlSyntacticSequencer extends AbstractSyntacticSequencer {

	protected NlToSqlGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Comparison___AKeyword_0_1_or_TheKeyword_0_0__q;
	protected AbstractElementAlias match_DeleteStatement___CanKeyword_0_0_YouKeyword_0_1_PleaseKeyword_0_2__q;
	protected AbstractElementAlias match_EntityName___AKeyword_0_1_or_TheKeyword_0_0__q;
	protected AbstractElementAlias match_Entity___AKeyword_0_1_or_TheKeyword_0_0__q;
	protected AbstractElementAlias match_InsertStatement___CanKeyword_0_0_YouKeyword_0_1_PleaseKeyword_0_2__q;
	protected AbstractElementAlias match_PropertyName___AKeyword_0_1_or_TheKeyword_0_0__q;
	protected AbstractElementAlias match_PropertyReference___AKeyword_0_1_or_TheKeyword_0_0__q;
	protected AbstractElementAlias match_Property___AKeyword_0_1_or_TheKeyword_0_0__q;
	protected AbstractElementAlias match_SelectList___AKeyword_0_1_or_TheKeyword_0_0__q;
	protected AbstractElementAlias match_SelectStatement___CanKeyword_0_0_YouKeyword_0_1_PleaseKeyword_0_2__q;
	protected AbstractElementAlias match_UpdateItem___AKeyword_0_1_or_TheKeyword_0_0__q;
	protected AbstractElementAlias match_UpdateStatement___CanKeyword_0_0_YouKeyword_0_1_PleaseKeyword_0_2__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (NlToSqlGrammarAccess) access;
		match_Comparison___AKeyword_0_1_or_TheKeyword_0_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getComparisonAccess().getAKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getComparisonAccess().getTheKeyword_0_0()));
		match_DeleteStatement___CanKeyword_0_0_YouKeyword_0_1_PleaseKeyword_0_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getDeleteStatementAccess().getCanKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getDeleteStatementAccess().getYouKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getDeleteStatementAccess().getPleaseKeyword_0_2()));
		match_EntityName___AKeyword_0_1_or_TheKeyword_0_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getEntityNameAccess().getAKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getEntityNameAccess().getTheKeyword_0_0()));
		match_Entity___AKeyword_0_1_or_TheKeyword_0_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getEntityAccess().getAKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getEntityAccess().getTheKeyword_0_0()));
		match_InsertStatement___CanKeyword_0_0_YouKeyword_0_1_PleaseKeyword_0_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getInsertStatementAccess().getCanKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getInsertStatementAccess().getYouKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getInsertStatementAccess().getPleaseKeyword_0_2()));
		match_PropertyName___AKeyword_0_1_or_TheKeyword_0_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getPropertyNameAccess().getAKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getPropertyNameAccess().getTheKeyword_0_0()));
		match_PropertyReference___AKeyword_0_1_or_TheKeyword_0_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getPropertyReferenceAccess().getAKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getPropertyReferenceAccess().getTheKeyword_0_0()));
		match_Property___AKeyword_0_1_or_TheKeyword_0_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getPropertyAccess().getAKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getPropertyAccess().getTheKeyword_0_0()));
		match_SelectList___AKeyword_0_1_or_TheKeyword_0_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getSelectListAccess().getAKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getSelectListAccess().getTheKeyword_0_0()));
		match_SelectStatement___CanKeyword_0_0_YouKeyword_0_1_PleaseKeyword_0_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getSelectStatementAccess().getCanKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getSelectStatementAccess().getYouKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getSelectStatementAccess().getPleaseKeyword_0_2()));
		match_UpdateItem___AKeyword_0_1_or_TheKeyword_0_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getUpdateItemAccess().getAKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getUpdateItemAccess().getTheKeyword_0_0()));
		match_UpdateStatement___CanKeyword_0_0_YouKeyword_0_1_PleaseKeyword_0_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getUpdateStatementAccess().getCanKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getUpdateStatementAccess().getYouKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getUpdateStatementAccess().getPleaseKeyword_0_2()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Comparison___AKeyword_0_1_or_TheKeyword_0_0__q.equals(syntax))
				emit_Comparison___AKeyword_0_1_or_TheKeyword_0_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DeleteStatement___CanKeyword_0_0_YouKeyword_0_1_PleaseKeyword_0_2__q.equals(syntax))
				emit_DeleteStatement___CanKeyword_0_0_YouKeyword_0_1_PleaseKeyword_0_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_EntityName___AKeyword_0_1_or_TheKeyword_0_0__q.equals(syntax))
				emit_EntityName___AKeyword_0_1_or_TheKeyword_0_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Entity___AKeyword_0_1_or_TheKeyword_0_0__q.equals(syntax))
				emit_Entity___AKeyword_0_1_or_TheKeyword_0_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_InsertStatement___CanKeyword_0_0_YouKeyword_0_1_PleaseKeyword_0_2__q.equals(syntax))
				emit_InsertStatement___CanKeyword_0_0_YouKeyword_0_1_PleaseKeyword_0_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PropertyName___AKeyword_0_1_or_TheKeyword_0_0__q.equals(syntax))
				emit_PropertyName___AKeyword_0_1_or_TheKeyword_0_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PropertyReference___AKeyword_0_1_or_TheKeyword_0_0__q.equals(syntax))
				emit_PropertyReference___AKeyword_0_1_or_TheKeyword_0_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Property___AKeyword_0_1_or_TheKeyword_0_0__q.equals(syntax))
				emit_Property___AKeyword_0_1_or_TheKeyword_0_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SelectList___AKeyword_0_1_or_TheKeyword_0_0__q.equals(syntax))
				emit_SelectList___AKeyword_0_1_or_TheKeyword_0_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SelectStatement___CanKeyword_0_0_YouKeyword_0_1_PleaseKeyword_0_2__q.equals(syntax))
				emit_SelectStatement___CanKeyword_0_0_YouKeyword_0_1_PleaseKeyword_0_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_UpdateItem___AKeyword_0_1_or_TheKeyword_0_0__q.equals(syntax))
				emit_UpdateItem___AKeyword_0_1_or_TheKeyword_0_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_UpdateStatement___CanKeyword_0_0_YouKeyword_0_1_PleaseKeyword_0_2__q.equals(syntax))
				emit_UpdateStatement___CanKeyword_0_0_YouKeyword_0_1_PleaseKeyword_0_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('the' | 'a')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) leftHandSide=[Property|ID]
	 */
	protected void emit_Comparison___AKeyword_0_1_or_TheKeyword_0_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('can' 'you' 'please')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'delete' 'from' entity=EntityName
	 */
	protected void emit_DeleteStatement___CanKeyword_0_0_YouKeyword_0_1_PleaseKeyword_0_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('the' | 'a')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=ID
	 */
	protected void emit_EntityName___AKeyword_0_1_or_TheKeyword_0_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('the' | 'a')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=ID
	 */
	protected void emit_Entity___AKeyword_0_1_or_TheKeyword_0_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('can' 'you' 'please')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'insert' 'into' entity=EntityName
	 */
	protected void emit_InsertStatement___CanKeyword_0_0_YouKeyword_0_1_PleaseKeyword_0_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('the' | 'a')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=ID
	 */
	protected void emit_PropertyName___AKeyword_0_1_or_TheKeyword_0_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('the' | 'a')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) property=[Property|ID]
	 */
	protected void emit_PropertyReference___AKeyword_0_1_or_TheKeyword_0_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('the' | 'a')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=ID
	 */
	protected void emit_Property___AKeyword_0_1_or_TheKeyword_0_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('the' | 'a')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('can' 'you' 'please')? 'show' (ambiguity) selectItem+=PropertyReference
	 *     (rule start) (ambiguity) selectItem+=PropertyReference
	 */
	protected void emit_SelectList___AKeyword_0_1_or_TheKeyword_0_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('can' 'you' 'please')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'show' 'all' 'from' entity=EntityName
	 *     (rule start) (ambiguity) 'show' ('the' | 'a')? selectItem+=PropertyReference
	 */
	protected void emit_SelectStatement___CanKeyword_0_0_YouKeyword_0_1_PleaseKeyword_0_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('the' | 'a')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) property=[Property|ID]
	 */
	protected void emit_UpdateItem___AKeyword_0_1_or_TheKeyword_0_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('can' 'you' 'please')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'update' entity=EntityName
	 */
	protected void emit_UpdateStatement___CanKeyword_0_0_YouKeyword_0_1_PleaseKeyword_0_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
