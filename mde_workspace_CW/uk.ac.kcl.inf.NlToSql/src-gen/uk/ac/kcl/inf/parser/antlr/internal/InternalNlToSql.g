/*
 * generated by Xtext 2.25.0
 */
grammar InternalNlToSql;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.kcl.inf.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.kcl.inf.services.NlToSqlGrammarAccess;

}

@parser::members {

 	private NlToSqlGrammarAccess grammarAccess;

    public InternalNlToSqlParser(TokenStream input, NlToSqlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "AccountingSpeech";
   	}

   	@Override
   	protected NlToSqlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleAccountingSpeech
entryRuleAccountingSpeech returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAccountingSpeechRule()); }
	iv_ruleAccountingSpeech=ruleAccountingSpeech
	{ $current=$iv_ruleAccountingSpeech.current; }
	EOF;

// Rule AccountingSpeech
ruleAccountingSpeech returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getAccountingSpeechAccess().getStatementsStatementParserRuleCall_0());
			}
			lv_statements_0_0=ruleStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getAccountingSpeechRule());
				}
				add(
					$current,
					"statements",
					lv_statements_0_0,
					"uk.ac.kcl.inf.NlToSql.Statement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getCreateTableStatementParserRuleCall_0_0());
			}
			this_CreateTableStatement_0=ruleCreateTableStatement
			{
				$current = $this_CreateTableStatement_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getSelectStatementParserRuleCall_0_1());
			}
			this_SelectStatement_1=ruleSelectStatement
			{
				$current = $this_SelectStatement_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getInsertStatementParserRuleCall_0_2());
			}
			this_InsertStatement_2=ruleInsertStatement
			{
				$current = $this_InsertStatement_2.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getUpdateStatementParserRuleCall_0_3());
			}
			this_UpdateStatement_3=ruleUpdateStatement
			{
				$current = $this_UpdateStatement_3.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getDeleteStatementParserRuleCall_0_4());
			}
			this_DeleteStatement_4=ruleDeleteStatement
			{
				$current = $this_DeleteStatement_4.current;
				afterParserOrEnumRuleCall();
			}
		)
		otherlv_5='.'
		{
			newLeafNode(otherlv_5, grammarAccess.getStatementAccess().getFullStopKeyword_1());
		}
	)
;

// Entry rule entryRuleCreateTableStatement
entryRuleCreateTableStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCreateTableStatementRule()); }
	iv_ruleCreateTableStatement=ruleCreateTableStatement
	{ $current=$iv_ruleCreateTableStatement.current; }
	EOF;

// Rule CreateTableStatement
ruleCreateTableStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Create'
		{
			newLeafNode(otherlv_0, grammarAccess.getCreateTableStatementAccess().getCreateKeyword_0());
		}
		otherlv_1='table'
		{
			newLeafNode(otherlv_1, grammarAccess.getCreateTableStatementAccess().getTableKeyword_1());
		}
		otherlv_2='called'
		{
			newLeafNode(otherlv_2, grammarAccess.getCreateTableStatementAccess().getCalledKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCreateTableStatementAccess().getTableTableParserRuleCall_3_0());
				}
				lv_table_3_0=ruleTable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCreateTableStatementRule());
					}
					set(
						$current,
						"table",
						lv_table_3_0,
						"uk.ac.kcl.inf.NlToSql.Table");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='with'
			{
				newLeafNode(otherlv_4, grammarAccess.getCreateTableStatementAccess().getWithKeyword_4_0());
			}
			otherlv_5='columns'
			{
				newLeafNode(otherlv_5, grammarAccess.getCreateTableStatementAccess().getColumnsKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCreateTableStatementAccess().getColumnsColumnListParserRuleCall_4_2_0());
					}
					lv_columns_6_0=ruleColumnList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCreateTableStatementRule());
						}
						set(
							$current,
							"columns",
							lv_columns_6_0,
							"uk.ac.kcl.inf.NlToSql.ColumnList");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleColumnList
entryRuleColumnList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnListRule()); }
	iv_ruleColumnList=ruleColumnList
	{ $current=$iv_ruleColumnList.current; }
	EOF;

// Rule ColumnList
ruleColumnList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getColumnListAccess().getColumnItemColumnParserRuleCall_0_0());
				}
				lv_columnItem_0_0=ruleColumn
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColumnListRule());
					}
					add(
						$current,
						"columnItem",
						lv_columnItem_0_0,
						"uk.ac.kcl.inf.NlToSql.Column");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getColumnListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getColumnListAccess().getColumnItemColumnParserRuleCall_1_1_0());
					}
					lv_columnItem_2_0=ruleColumn
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getColumnListRule());
						}
						add(
							$current,
							"columnItem",
							lv_columnItem_2_0,
							"uk.ac.kcl.inf.NlToSql.Column");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleTable
entryRuleTable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTableRule()); }
	iv_ruleTable=ruleTable
	{ $current=$iv_ruleTable.current; }
	EOF;

// Rule Table
ruleTable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getTableAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getTableRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleColumn
entryRuleColumn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnRule()); }
	iv_ruleColumn=ruleColumn
	{ $current=$iv_ruleColumn.current; }
	EOF;

// Rule Column
ruleColumn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getColumnRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='of'
		{
			newLeafNode(otherlv_1, grammarAccess.getColumnAccess().getOfKeyword_1());
		}
		otherlv_2='type'
		{
			newLeafNode(otherlv_2, grammarAccess.getColumnAccess().getTypeKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getColumnAccess().getTypeDatatypeEnumRuleCall_3_0());
				}
				lv_type_3_0=ruleDatatype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColumnRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"uk.ac.kcl.inf.NlToSql.Datatype");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getColumnRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getColumnAccess().getTableTableCrossReference_4_0());
				}
			)
		)?
	)
;

// Entry rule entryRuleSelectStatement
entryRuleSelectStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectStatementRule()); }
	iv_ruleSelectStatement=ruleSelectStatement
	{ $current=$iv_ruleSelectStatement.current; }
	EOF;

// Rule SelectStatement
ruleSelectStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='From'
		{
			newLeafNode(otherlv_0, grammarAccess.getSelectStatementAccess().getFromKeyword_0());
		}
		otherlv_1='the'
		{
			newLeafNode(otherlv_1, grammarAccess.getSelectStatementAccess().getTheKeyword_1());
		}
		otherlv_2='table'
		{
			newLeafNode(otherlv_2, grammarAccess.getSelectStatementAccess().getTableKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectStatementAccess().getTablesSelectTablesListParserRuleCall_3_0());
				}
				lv_tables_3_0=ruleSelectTablesList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectStatementRule());
					}
					set(
						$current,
						"tables",
						lv_tables_3_0,
						"uk.ac.kcl.inf.NlToSql.SelectTablesList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='show'
		{
			newLeafNode(otherlv_4, grammarAccess.getSelectStatementAccess().getShowKeyword_4());
		}
		(
			(
				otherlv_5='the'
				{
					newLeafNode(otherlv_5, grammarAccess.getSelectStatementAccess().getTheKeyword_5_0_0());
				}
				otherlv_6='columns:'
				{
					newLeafNode(otherlv_6, grammarAccess.getSelectStatementAccess().getColumnsKeyword_5_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSelectStatementAccess().getColumnsSelectColumnsListParserRuleCall_5_0_2_0());
						}
						lv_columns_7_0=ruleSelectColumnsList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSelectStatementRule());
							}
							set(
								$current,
								"columns",
								lv_columns_7_0,
								"uk.ac.kcl.inf.NlToSql.SelectColumnsList");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				otherlv_8='all'
				{
					newLeafNode(otherlv_8, grammarAccess.getSelectStatementAccess().getAllKeyword_5_1_0());
				}
				otherlv_9='columns'
				{
					newLeafNode(otherlv_9, grammarAccess.getSelectStatementAccess().getColumnsKeyword_5_1_1());
				}
			)
		)
		(
			otherlv_10='where'
			{
				newLeafNode(otherlv_10, grammarAccess.getSelectStatementAccess().getWhereKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectStatementAccess().getConditionConditionParserRuleCall_6_1_0());
					}
					lv_condition_11_0=ruleCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectStatementRule());
						}
						set(
							$current,
							"condition",
							lv_condition_11_0,
							"uk.ac.kcl.inf.NlToSql.Condition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_12='group'
			{
				newLeafNode(otherlv_12, grammarAccess.getSelectStatementAccess().getGroupKeyword_7_0());
			}
			otherlv_13='them'
			{
				newLeafNode(otherlv_13, grammarAccess.getSelectStatementAccess().getThemKeyword_7_1());
			}
			otherlv_14='by'
			{
				newLeafNode(otherlv_14, grammarAccess.getSelectStatementAccess().getByKeyword_7_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectStatementAccess().getGroupSelectColumnsListParserRuleCall_7_3_0());
					}
					lv_group_15_0=ruleSelectColumnsList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectStatementRule());
						}
						set(
							$current,
							"group",
							lv_group_15_0,
							"uk.ac.kcl.inf.NlToSql.SelectColumnsList");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleInsertStatement
entryRuleInsertStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInsertStatementRule()); }
	iv_ruleInsertStatement=ruleInsertStatement
	{ $current=$iv_ruleInsertStatement.current; }
	EOF;

// Rule InsertStatement
ruleInsertStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Insert'
		{
			newLeafNode(otherlv_0, grammarAccess.getInsertStatementAccess().getInsertKeyword_0());
		}
		otherlv_1='into'
		{
			newLeafNode(otherlv_1, grammarAccess.getInsertStatementAccess().getIntoKeyword_1());
		}
		otherlv_2='the'
		{
			newLeafNode(otherlv_2, grammarAccess.getInsertStatementAccess().getTheKeyword_2());
		}
		otherlv_3='table'
		{
			newLeafNode(otherlv_3, grammarAccess.getInsertStatementAccess().getTableKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInsertStatementAccess().getTableSelectTableParserRuleCall_4_0());
				}
				lv_table_4_0=ruleSelectTable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInsertStatementRule());
					}
					set(
						$current,
						"table",
						lv_table_4_0,
						"uk.ac.kcl.inf.NlToSql.SelectTable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='for'
		{
			newLeafNode(otherlv_5, grammarAccess.getInsertStatementAccess().getForKeyword_5());
		}
		otherlv_6='the'
		{
			newLeafNode(otherlv_6, grammarAccess.getInsertStatementAccess().getTheKeyword_6());
		}
		otherlv_7='columns'
		{
			newLeafNode(otherlv_7, grammarAccess.getInsertStatementAccess().getColumnsKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInsertStatementAccess().getColumnsSelectColumnsListParserRuleCall_8_0());
				}
				lv_columns_8_0=ruleSelectColumnsList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInsertStatementRule());
					}
					set(
						$current,
						"columns",
						lv_columns_8_0,
						"uk.ac.kcl.inf.NlToSql.SelectColumnsList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9='insert'
		{
			newLeafNode(otherlv_9, grammarAccess.getInsertStatementAccess().getInsertKeyword_9());
		}
		otherlv_10='the'
		{
			newLeafNode(otherlv_10, grammarAccess.getInsertStatementAccess().getTheKeyword_10());
		}
		otherlv_11='values'
		{
			newLeafNode(otherlv_11, grammarAccess.getInsertStatementAccess().getValuesKeyword_11());
		}
		otherlv_12='('
		{
			newLeafNode(otherlv_12, grammarAccess.getInsertStatementAccess().getLeftParenthesisKeyword_12());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInsertStatementAccess().getValuesInserValuesParserRuleCall_13_0());
				}
				lv_values_13_0=ruleInserValues
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInsertStatementRule());
					}
					set(
						$current,
						"values",
						lv_values_13_0,
						"uk.ac.kcl.inf.NlToSql.InserValues");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_14=')'
		{
			newLeafNode(otherlv_14, grammarAccess.getInsertStatementAccess().getRightParenthesisKeyword_14());
		}
	)
;

// Entry rule entryRuleUpdateStatement
entryRuleUpdateStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUpdateStatementRule()); }
	iv_ruleUpdateStatement=ruleUpdateStatement
	{ $current=$iv_ruleUpdateStatement.current; }
	EOF;

// Rule UpdateStatement
ruleUpdateStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Update'
		{
			newLeafNode(otherlv_0, grammarAccess.getUpdateStatementAccess().getUpdateKeyword_0());
		}
		otherlv_1='the'
		{
			newLeafNode(otherlv_1, grammarAccess.getUpdateStatementAccess().getTheKeyword_1());
		}
		otherlv_2='table'
		{
			newLeafNode(otherlv_2, grammarAccess.getUpdateStatementAccess().getTableKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUpdateStatementAccess().getTableSelectTableParserRuleCall_3_0());
				}
				lv_table_3_0=ruleSelectTable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUpdateStatementRule());
					}
					set(
						$current,
						"table",
						lv_table_3_0,
						"uk.ac.kcl.inf.NlToSql.SelectTable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='to'
		{
			newLeafNode(otherlv_4, grammarAccess.getUpdateStatementAccess().getToKeyword_4());
		}
		otherlv_5='set'
		{
			newLeafNode(otherlv_5, grammarAccess.getUpdateStatementAccess().getSetKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUpdateStatementAccess().getUpdatesSelectUpdateListParserRuleCall_6_0());
				}
				lv_updates_6_0=ruleSelectUpdateList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUpdateStatementRule());
					}
					set(
						$current,
						"updates",
						lv_updates_6_0,
						"uk.ac.kcl.inf.NlToSql.SelectUpdateList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_7='where'
			{
				newLeafNode(otherlv_7, grammarAccess.getUpdateStatementAccess().getWhereKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getUpdateStatementAccess().getConditionConditionParserRuleCall_7_1_0());
					}
					lv_condition_8_0=ruleCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUpdateStatementRule());
						}
						set(
							$current,
							"condition",
							lv_condition_8_0,
							"uk.ac.kcl.inf.NlToSql.Condition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleDeleteStatement
entryRuleDeleteStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeleteStatementRule()); }
	iv_ruleDeleteStatement=ruleDeleteStatement
	{ $current=$iv_ruleDeleteStatement.current; }
	EOF;

// Rule DeleteStatement
ruleDeleteStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='Delete'
			{
				newLeafNode(otherlv_0, grammarAccess.getDeleteStatementAccess().getDeleteKeyword_0_0());
			}
			otherlv_1='the'
			{
				newLeafNode(otherlv_1, grammarAccess.getDeleteStatementAccess().getTheKeyword_0_1());
			}
			otherlv_2='table'
			{
				newLeafNode(otherlv_2, grammarAccess.getDeleteStatementAccess().getTableKeyword_0_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDeleteStatementAccess().getTablesSelectTablesListParserRuleCall_0_3_0());
					}
					lv_tables_3_0=ruleSelectTablesList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDeleteStatementRule());
						}
						set(
							$current,
							"tables",
							lv_tables_3_0,
							"uk.ac.kcl.inf.NlToSql.SelectTablesList");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_4='Empty'
			{
				newLeafNode(otherlv_4, grammarAccess.getDeleteStatementAccess().getEmptyKeyword_1_0());
			}
			otherlv_5='the'
			{
				newLeafNode(otherlv_5, grammarAccess.getDeleteStatementAccess().getTheKeyword_1_1());
			}
			otherlv_6='table'
			{
				newLeafNode(otherlv_6, grammarAccess.getDeleteStatementAccess().getTableKeyword_1_2());
			}
			{
				newCompositeNode(grammarAccess.getDeleteStatementAccess().getSelectTableParserRuleCall_1_3());
			}
			this_SelectTable_7=ruleSelectTable
			{
				$current = $this_SelectTable_7.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			otherlv_8='Delete'
			{
				newLeafNode(otherlv_8, grammarAccess.getDeleteStatementAccess().getDeleteKeyword_2_0());
			}
			otherlv_9='records'
			{
				newLeafNode(otherlv_9, grammarAccess.getDeleteStatementAccess().getRecordsKeyword_2_1());
			}
			otherlv_10='from'
			{
				newLeafNode(otherlv_10, grammarAccess.getDeleteStatementAccess().getFromKeyword_2_2());
			}
			otherlv_11='the'
			{
				newLeafNode(otherlv_11, grammarAccess.getDeleteStatementAccess().getTheKeyword_2_3());
			}
			otherlv_12='table'
			{
				newLeafNode(otherlv_12, grammarAccess.getDeleteStatementAccess().getTableKeyword_2_4());
			}
			{
				newCompositeNode(grammarAccess.getDeleteStatementAccess().getSelectTableParserRuleCall_2_5());
			}
			this_SelectTable_13=ruleSelectTable
			{
				$current = $this_SelectTable_13.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_14='where'
			{
				newLeafNode(otherlv_14, grammarAccess.getDeleteStatementAccess().getWhereKeyword_2_6());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDeleteStatementAccess().getConditionConditionParserRuleCall_2_7_0());
					}
					lv_condition_15_0=ruleCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDeleteStatementRule());
						}
						set(
							$current,
							"condition",
							lv_condition_15_0,
							"uk.ac.kcl.inf.NlToSql.Condition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSelectUpdateList
entryRuleSelectUpdateList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectUpdateListRule()); }
	iv_ruleSelectUpdateList=ruleSelectUpdateList
	{ $current=$iv_ruleSelectUpdateList.current; }
	EOF;

// Rule SelectUpdateList
ruleSelectUpdateList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectUpdateListAccess().getUpdateItemUpdateItemParserRuleCall_0_0());
				}
				lv_updateItem_0_0=ruleUpdateItem
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectUpdateListRule());
					}
					add(
						$current,
						"updateItem",
						lv_updateItem_0_0,
						"uk.ac.kcl.inf.NlToSql.UpdateItem");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getSelectUpdateListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectUpdateListAccess().getUpdateItemUpdateItemParserRuleCall_1_1_0());
					}
					lv_updateItem_2_0=ruleUpdateItem
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectUpdateListRule());
						}
						add(
							$current,
							"updateItem",
							lv_updateItem_2_0,
							"uk.ac.kcl.inf.NlToSql.UpdateItem");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleUpdateItem
entryRuleUpdateItem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUpdateItemRule()); }
	iv_ruleUpdateItem=ruleUpdateItem
	{ $current=$iv_ruleUpdateItem.current; }
	EOF;

// Rule UpdateItem
ruleUpdateItem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUpdateItemAccess().getColumnColumnReferenceParserRuleCall_0_0());
				}
				lv_column_0_0=ruleColumnReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUpdateItemRule());
					}
					set(
						$current,
						"column",
						lv_column_0_0,
						"uk.ac.kcl.inf.NlToSql.ColumnReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getUpdateItemAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUpdateItemAccess().getValueValueParserRuleCall_2_0());
				}
				lv_value_2_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUpdateItemRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"uk.ac.kcl.inf.NlToSql.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInserValues
entryRuleInserValues returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInserValuesRule()); }
	iv_ruleInserValues=ruleInserValues
	{ $current=$iv_ruleInserValues.current; }
	EOF;

// Rule InserValues
ruleInserValues returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getInserValuesAccess().getValueListValueParserRuleCall_0_0());
				}
				lv_valueList_0_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInserValuesRule());
					}
					add(
						$current,
						"valueList",
						lv_valueList_0_0,
						"uk.ac.kcl.inf.NlToSql.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getInserValuesAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInserValuesAccess().getValueListValueParserRuleCall_1_1_0());
					}
					lv_valueList_2_0=ruleValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInserValuesRule());
						}
						add(
							$current,
							"valueList",
							lv_valueList_2_0,
							"uk.ac.kcl.inf.NlToSql.Value");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSelectTablesList
entryRuleSelectTablesList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectTablesListRule()); }
	iv_ruleSelectTablesList=ruleSelectTablesList
	{ $current=$iv_ruleSelectTablesList.current; }
	EOF;

// Rule SelectTablesList
ruleSelectTablesList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSelectTablesListRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getSelectTablesListAccess().getSelectTableTableCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getSelectTablesListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSelectTablesListRule());
						}
					}
					otherlv_2=RULE_ID
					{
						newLeafNode(otherlv_2, grammarAccess.getSelectTablesListAccess().getSelectTableTableCrossReference_1_1_0());
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSelectTable
entryRuleSelectTable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectTableRule()); }
	iv_ruleSelectTable=ruleSelectTable
	{ $current=$iv_ruleSelectTable.current; }
	EOF;

// Rule SelectTable
ruleSelectTable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getSelectTableRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getSelectTableAccess().getTableTableCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleSelectColumnsList
entryRuleSelectColumnsList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectColumnsListRule()); }
	iv_ruleSelectColumnsList=ruleSelectColumnsList
	{ $current=$iv_ruleSelectColumnsList.current; }
	EOF;

// Rule SelectColumnsList
ruleSelectColumnsList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectColumnsListAccess().getSelectColumnColumnReferenceParserRuleCall_0_0());
				}
				lv_selectColumn_0_0=ruleColumnReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectColumnsListRule());
					}
					add(
						$current,
						"selectColumn",
						lv_selectColumn_0_0,
						"uk.ac.kcl.inf.NlToSql.ColumnReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getSelectColumnsListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectColumnsListAccess().getSelectColumnColumnReferenceParserRuleCall_1_1_0());
					}
					lv_selectColumn_2_0=ruleColumnReference
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectColumnsListRule());
						}
						add(
							$current,
							"selectColumn",
							lv_selectColumn_2_0,
							"uk.ac.kcl.inf.NlToSql.ColumnReference");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleColumnReference
entryRuleColumnReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnReferenceRule()); }
	iv_ruleColumnReference=ruleColumnReference
	{ $current=$iv_ruleColumnReference.current; }
	EOF;

// Rule ColumnReference
ruleColumnReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getColumnReferenceRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getColumnReferenceAccess().getColumnColumnCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1='in'
			{
				newLeafNode(otherlv_1, grammarAccess.getColumnReferenceAccess().getInKeyword_1_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColumnReferenceRule());
						}
					}
					otherlv_2=RULE_ID
					{
						newLeafNode(otherlv_2, grammarAccess.getColumnReferenceAccess().getTableTableCrossReference_1_1_0());
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConditionAccess().getComparisonParserRuleCall_0());
		}
		this_Comparison_0=ruleComparison
		{
			$current = $this_Comparison_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getConditionAccess().getComparisonLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionAccess().getLogicOperatorLogicOperatorEnumRuleCall_1_1_0());
					}
					lv_logicOperator_2_0=ruleLogicOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionRule());
						}
						set(
							$current,
							"logicOperator",
							lv_logicOperator_2_0,
							"uk.ac.kcl.inf.NlToSql.LogicOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionAccess().getRightComparisonParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleComparison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionRule());
						}
						add(
							$current,
							"right",
							lv_right_3_0,
							"uk.ac.kcl.inf.NlToSql.Comparison");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	iv_ruleComparison=ruleComparison
	{ $current=$iv_ruleComparison.current; }
	EOF;

// Rule Comparison
ruleComparison returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='the'
			{
				newLeafNode(otherlv_0, grammarAccess.getComparisonAccess().getTheKeyword_0_0());
			}
			    |
			otherlv_1='a'
			{
				newLeafNode(otherlv_1, grammarAccess.getComparisonAccess().getAKeyword_0_1());
			}
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComparisonRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getComparisonAccess().getLeftHandSideColumnCrossReference_1_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComparisonAccess().getOperatorComparisonOperatorParserRuleCall_2_0());
				}
				lv_operator_3_0=ruleComparisonOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComparisonRule());
					}
					set(
						$current,
						"operator",
						lv_operator_3_0,
						"uk.ac.kcl.inf.NlToSql.ComparisonOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComparisonAccess().getRightHandSideValueParserRuleCall_3_0());
				}
				lv_rightHandSide_4_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComparisonRule());
					}
					set(
						$current,
						"rightHandSide",
						lv_rightHandSide_4_0,
						"uk.ac.kcl.inf.NlToSql.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleComparisonOperator
entryRuleComparisonOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getComparisonOperatorRule()); }
	iv_ruleComparisonOperator=ruleComparisonOperator
	{ $current=$iv_ruleComparisonOperator.current.getText(); }
	EOF;

// Rule ComparisonOperator
ruleComparisonOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComparisonOperatorAccess().getComparisonOperatorSignsParserRuleCall_0());
		}
		this_ComparisonOperatorSigns_0=ruleComparisonOperatorSigns
		{
			$current.merge(this_ComparisonOperatorSigns_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getComparisonOperatorAccess().getComparisonOperatorStringParserRuleCall_1());
		}
		this_ComparisonOperatorString_1=ruleComparisonOperatorString
		{
			$current.merge(this_ComparisonOperatorString_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleComparisonOperatorString
entryRuleComparisonOperatorString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getComparisonOperatorStringRule()); }
	iv_ruleComparisonOperatorString=ruleComparisonOperatorString
	{ $current=$iv_ruleComparisonOperatorString.current.getText(); }
	EOF;

// Rule ComparisonOperatorString
ruleComparisonOperatorString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='is'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorStringAccess().getIsKeyword_0_0());
			}
			kw='equal'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorStringAccess().getEqualKeyword_0_1());
			}
			kw='to'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorStringAccess().getToKeyword_0_2());
			}
		)
		    |
		(
			kw='is'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorStringAccess().getIsKeyword_1_0());
			}
			kw='not'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorStringAccess().getNotKeyword_1_1());
			}
			kw='equal'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorStringAccess().getEqualKeyword_1_2());
			}
			kw='to'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorStringAccess().getToKeyword_1_3());
			}
		)
		    |
		(
			kw='less'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorStringAccess().getLessKeyword_2_0());
			}
			kw='than'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorStringAccess().getThanKeyword_2_1());
			}
		)
		    |
		(
			kw='greater'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorStringAccess().getGreaterKeyword_3_0());
			}
			kw='than'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorStringAccess().getThanKeyword_3_1());
			}
		)
		    |
		(
			kw='less'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorStringAccess().getLessKeyword_4_0());
			}
			kw='than'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorStringAccess().getThanKeyword_4_1());
			}
			kw='or'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorStringAccess().getOrKeyword_4_2());
			}
			kw='equal'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorStringAccess().getEqualKeyword_4_3());
			}
			kw='to'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorStringAccess().getToKeyword_4_4());
			}
		)
		    |
		(
			kw='greater'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorStringAccess().getGreaterKeyword_5_0());
			}
			kw='than'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorStringAccess().getThanKeyword_5_1());
			}
			kw='or'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorStringAccess().getOrKeyword_5_2());
			}
			kw='equal'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorStringAccess().getEqualKeyword_5_3());
			}
			kw='to'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorStringAccess().getToKeyword_5_4());
			}
		)
	)
;

// Entry rule entryRuleComparisonOperatorSigns
entryRuleComparisonOperatorSigns returns [String current=null]:
	{ newCompositeNode(grammarAccess.getComparisonOperatorSignsRule()); }
	iv_ruleComparisonOperatorSigns=ruleComparisonOperatorSigns
	{ $current=$iv_ruleComparisonOperatorSigns.current.getText(); }
	EOF;

// Rule ComparisonOperatorSigns
ruleComparisonOperatorSigns returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparisonOperatorSignsAccess().getEqualsSignKeyword_0());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparisonOperatorSignsAccess().getLessThanSignEqualsSignKeyword_1());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparisonOperatorSignsAccess().getGreaterThanSignEqualsSignKeyword_2());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparisonOperatorSignsAccess().getGreaterThanSignKeyword_3());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparisonOperatorSignsAccess().getLessThanSignKeyword_4());
		}
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current.getText(); }
	EOF;

// Rule Value
ruleValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getValueAccess().getINTTerminalRuleCall_0());
		}
		    |
		this_STRING_1=RULE_STRING
		{
			$current.merge(this_STRING_1);
		}
		{
			newLeafNode(this_STRING_1, grammarAccess.getValueAccess().getSTRINGTerminalRuleCall_1());
		}
	)
;

// Rule Datatype
ruleDatatype returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='integer'
			{
				$current = grammarAccess.getDatatypeAccess().getIntegerEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getDatatypeAccess().getIntegerEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='string'
			{
				$current = grammarAccess.getDatatypeAccess().getStringEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getDatatypeAccess().getStringEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='date'
			{
				$current = grammarAccess.getDatatypeAccess().getDateEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getDatatypeAccess().getDateEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule LogicOperator
ruleLogicOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='and'
			{
				$current = grammarAccess.getLogicOperatorAccess().getAndEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getLogicOperatorAccess().getAndEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='or'
			{
				$current = grammarAccess.getLogicOperatorAccess().getOrEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getLogicOperatorAccess().getOrEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
