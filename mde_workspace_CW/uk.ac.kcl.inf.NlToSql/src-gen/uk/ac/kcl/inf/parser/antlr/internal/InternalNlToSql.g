/*
 * generated by Xtext 2.25.0
 */
grammar InternalNlToSql;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.kcl.inf.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.kcl.inf.services.NlToSqlGrammarAccess;

}

@parser::members {

 	private NlToSqlGrammarAccess grammarAccess;

    public InternalNlToSqlParser(TokenStream input, NlToSqlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "AccountingSpeech";
   	}

   	@Override
   	protected NlToSqlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleAccountingSpeech
entryRuleAccountingSpeech returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAccountingSpeechRule()); }
	iv_ruleAccountingSpeech=ruleAccountingSpeech
	{ $current=$iv_ruleAccountingSpeech.current; }
	EOF;

// Rule AccountingSpeech
ruleAccountingSpeech returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getAccountingSpeechAccess().getStatementsStatementParserRuleCall_0());
			}
			lv_statements_0_0=ruleStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getAccountingSpeechRule());
				}
				add(
					$current,
					"statements",
					lv_statements_0_0,
					"uk.ac.kcl.inf.NlToSql.Statement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSelectStatementParserRuleCall_0());
		}
		this_SelectStatement_0=ruleSelectStatement
		{
			$current = $this_SelectStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getStatementAccess().getFullStopKeyword_1());
		}
	)
;

// Entry rule entryRuleSelectStatement
entryRuleSelectStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectStatementRule()); }
	iv_ruleSelectStatement=ruleSelectStatement
	{ $current=$iv_ruleSelectStatement.current; }
	EOF;

// Rule SelectStatement
ruleSelectStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='can'
			{
				newLeafNode(otherlv_0, grammarAccess.getSelectStatementAccess().getCanKeyword_0_0());
			}
			otherlv_1='you'
			{
				newLeafNode(otherlv_1, grammarAccess.getSelectStatementAccess().getYouKeyword_0_1());
			}
		)?
		otherlv_2='show'
		{
			newLeafNode(otherlv_2, grammarAccess.getSelectStatementAccess().getShowKeyword_1());
		}
		(
			(
				(
					otherlv_3='the'
					{
						newLeafNode(otherlv_3, grammarAccess.getSelectStatementAccess().getTheKeyword_2_0_0_0());
					}
					otherlv_4='columns:'
					{
						newLeafNode(otherlv_4, grammarAccess.getSelectStatementAccess().getColumnsKeyword_2_0_0_1());
					}
					{
						newCompositeNode(grammarAccess.getSelectStatementAccess().getSelectListParserRuleCall_2_0_0_2());
					}
					this_SelectList_5=ruleSelectList
					{
						$current = $this_SelectList_5.current;
						afterParserOrEnumRuleCall();
					}
				)
				    |
				(
					otherlv_6='all'
					{
						newLeafNode(otherlv_6, grammarAccess.getSelectStatementAccess().getAllKeyword_2_0_1_0());
					}
					otherlv_7='columns'
					{
						newLeafNode(otherlv_7, grammarAccess.getSelectStatementAccess().getColumnsKeyword_2_0_1_1());
					}
				)
			)
			otherlv_8='from'
			{
				newLeafNode(otherlv_8, grammarAccess.getSelectStatementAccess().getFromKeyword_2_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectStatementAccess().getEntityEntityNameParserRuleCall_3_0());
				}
				lv_entity_9_0=ruleEntityName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectStatementRule());
					}
					set(
						$current,
						"entity",
						lv_entity_9_0,
						"uk.ac.kcl.inf.NlToSql.EntityName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_10='where'
			{
				newLeafNode(otherlv_10, grammarAccess.getSelectStatementAccess().getWhereKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectStatementAccess().getConditionConditionParserRuleCall_4_1_0());
					}
					lv_condition_11_0=ruleCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectStatementRule());
						}
						set(
							$current,
							"condition",
							lv_condition_11_0,
							"uk.ac.kcl.inf.NlToSql.Condition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_12='group'
			{
				newLeafNode(otherlv_12, grammarAccess.getSelectStatementAccess().getGroupKeyword_5_0());
			}
			otherlv_13='by'
			{
				newLeafNode(otherlv_13, grammarAccess.getSelectStatementAccess().getByKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectStatementAccess().getGroupByListPropertyReferenceParserRuleCall_5_2_0());
					}
					lv_groupByList_14_0=rulePropertyReference
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectStatementRule());
						}
						add(
							$current,
							"groupByList",
							lv_groupByList_14_0,
							"uk.ac.kcl.inf.NlToSql.PropertyReference");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_15=','
				{
					newLeafNode(otherlv_15, grammarAccess.getSelectStatementAccess().getCommaKeyword_5_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSelectStatementAccess().getGroupByListPropertyReferenceParserRuleCall_5_3_1_0());
						}
						lv_groupByList_16_0=rulePropertyReference
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSelectStatementRule());
							}
							add(
								$current,
								"groupByList",
								lv_groupByList_16_0,
								"uk.ac.kcl.inf.NlToSql.PropertyReference");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleEntityName
entryRuleEntityName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityNameRule()); }
	iv_ruleEntityName=ruleEntityName
	{ $current=$iv_ruleEntityName.current; }
	EOF;

// Rule EntityName
ruleEntityName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='the'
			{
				newLeafNode(otherlv_0, grammarAccess.getEntityNameAccess().getTheKeyword_0_0());
			}
			otherlv_1='table'
			{
				newLeafNode(otherlv_1, grammarAccess.getEntityNameAccess().getTableKeyword_0_1());
			}
		)?
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getEntityNameAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEntityNameRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleSelectList
entryRuleSelectList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectListRule()); }
	iv_ruleSelectList=ruleSelectList
	{ $current=$iv_ruleSelectList.current; }
	EOF;

// Rule SelectList
ruleSelectList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectListAccess().getSelectItemPropertyParserRuleCall_0_0());
				}
				lv_selectItem_0_0=ruleProperty
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectListRule());
					}
					add(
						$current,
						"selectItem",
						lv_selectItem_0_0,
						"uk.ac.kcl.inf.NlToSql.Property");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getSelectListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectListAccess().getSelectItemPropertyParserRuleCall_1_1_0());
					}
					lv_selectItem_2_0=ruleProperty
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectListRule());
						}
						add(
							$current,
							"selectItem",
							lv_selectItem_2_0,
							"uk.ac.kcl.inf.NlToSql.Property");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePropertyReference
entryRulePropertyReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertyReferenceRule()); }
	iv_rulePropertyReference=rulePropertyReference
	{ $current=$iv_rulePropertyReference.current; }
	EOF;

// Rule PropertyReference
rulePropertyReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getPropertyReferenceRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getPropertyReferenceAccess().getPropertyPropertyCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	iv_ruleProperty=ruleProperty
	{ $current=$iv_ruleProperty.current; }
	EOF;

// Rule Property
ruleProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='the'
			{
				newLeafNode(otherlv_0, grammarAccess.getPropertyAccess().getTheKeyword_0_0());
			}
			    |
			otherlv_1='a'
			{
				newLeafNode(otherlv_1, grammarAccess.getPropertyAccess().getAKeyword_0_1());
			}
		)?
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPropertyRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConditionAccess().getComparisonParserRuleCall_0());
		}
		this_Comparison_0=ruleComparison
		{
			$current = $this_Comparison_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getConditionAccess().getComparisonLeftAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getConditionAccess().getLogicOperatorParserRuleCall_1_1());
			}
			ruleLogicOperator
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionAccess().getRightComparisonParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleComparison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionRule());
						}
						add(
							$current,
							"right",
							lv_right_3_0,
							"uk.ac.kcl.inf.NlToSql.Comparison");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleLogicOperator
entryRuleLogicOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLogicOperatorRule()); }
	iv_ruleLogicOperator=ruleLogicOperator
	{ $current=$iv_ruleLogicOperator.current.getText(); }
	EOF;

// Rule LogicOperator
ruleLogicOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='and'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLogicOperatorAccess().getAndKeyword_0());
		}
		    |
		kw='or'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLogicOperatorAccess().getOrKeyword_1());
		}
	)
;

// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	iv_ruleComparison=ruleComparison
	{ $current=$iv_ruleComparison.current; }
	EOF;

// Rule Comparison
ruleComparison returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='the'
			{
				newLeafNode(otherlv_0, grammarAccess.getComparisonAccess().getTheKeyword_0_0());
			}
			    |
			otherlv_1='a'
			{
				newLeafNode(otherlv_1, grammarAccess.getComparisonAccess().getAKeyword_0_1());
			}
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComparisonRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getComparisonAccess().getLeftHandSidePropertyCrossReference_1_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComparisonAccess().getOperatorComparisonOperatorParserRuleCall_2_0());
				}
				lv_operator_3_0=ruleComparisonOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComparisonRule());
					}
					set(
						$current,
						"operator",
						lv_operator_3_0,
						"uk.ac.kcl.inf.NlToSql.ComparisonOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComparisonAccess().getRightHandSideValueParserRuleCall_3_0());
				}
				lv_rightHandSide_4_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComparisonRule());
					}
					set(
						$current,
						"rightHandSide",
						lv_rightHandSide_4_0,
						"uk.ac.kcl.inf.NlToSql.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleComparisonOperator
entryRuleComparisonOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getComparisonOperatorRule()); }
	iv_ruleComparisonOperator=ruleComparisonOperator
	{ $current=$iv_ruleComparisonOperator.current.getText(); }
	EOF;

// Rule ComparisonOperator
ruleComparisonOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getEqualsSignKeyword_0());
		}
		    |
		(
			kw='is'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getIsKeyword_1_0());
			}
			kw='equal'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getEqualKeyword_1_1());
			}
			kw='to'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getToKeyword_1_2());
			}
		)
		    |
		(
			kw='is'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getIsKeyword_2_0());
			}
			kw='not'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getNotKeyword_2_1());
			}
			kw='equal'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getEqualKeyword_2_2());
			}
			kw='to'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getToKeyword_2_3());
			}
		)
		    |
		(
			kw='less'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getLessKeyword_3_0());
			}
			kw='than'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getThanKeyword_3_1());
			}
		)
		    |
		(
			kw='greater'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getGreaterKeyword_4_0());
			}
			kw='than'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getThanKeyword_4_1());
			}
		)
		    |
		(
			kw='less'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getLessKeyword_5_0());
			}
			kw='than'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getThanKeyword_5_1());
			}
			kw='or'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getOrKeyword_5_2());
			}
			kw='equal'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getEqualKeyword_5_3());
			}
			kw='to'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getToKeyword_5_4());
			}
		)
		    |
		(
			kw='greater'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getGreaterKeyword_6_0());
			}
			kw='than'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getThanKeyword_6_1());
			}
			kw='or'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getOrKeyword_6_2());
			}
			kw='equal'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getEqualKeyword_6_3());
			}
			kw='to'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getToKeyword_6_4());
			}
		)
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current.getText(); }
	EOF;

// Rule Value
ruleValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getValueAccess().getINTTerminalRuleCall_0());
		}
		    |
		this_STRING_1=RULE_STRING
		{
			$current.merge(this_STRING_1);
		}
		{
			newLeafNode(this_STRING_1, grammarAccess.getValueAccess().getSTRINGTerminalRuleCall_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
