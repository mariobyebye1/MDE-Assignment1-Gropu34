/*
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class NlToSqlGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class AccountingSpeechElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.AccountingSpeech");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//// Define the root rule
		//AccountingSpeech:
		//    statements += Statement*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//statements += Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSelectStatementParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//// Define the Statement rule
		//Statement:
		//    (SelectStatement)
		////        InsertStatement | UpdateStatement | DeleteStatement
		//    '.'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    (SelectStatement)
		////        InsertStatement | UpdateStatement | DeleteStatement
		//    '.'
		public Group getGroup() { return cGroup; }
		
		//(SelectStatement)
		public RuleCall getSelectStatementParserRuleCall_0() { return cSelectStatementParserRuleCall_0; }
		
		////        InsertStatement | UpdateStatement | DeleteStatement
		//    '.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
	}
	public class SelectStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.SelectStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cCanKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cYouKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cShowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cAlternatives_2_0.eContents().get(0);
		private final Keyword cTheKeyword_2_0_0_0 = (Keyword)cGroup_2_0_0.eContents().get(0);
		private final Keyword cColumnsKeyword_2_0_0_1 = (Keyword)cGroup_2_0_0.eContents().get(1);
		private final RuleCall cSelectListParserRuleCall_2_0_0_2 = (RuleCall)cGroup_2_0_0.eContents().get(2);
		private final Group cGroup_2_0_1 = (Group)cAlternatives_2_0.eContents().get(1);
		private final Keyword cAllKeyword_2_0_1_0 = (Keyword)cGroup_2_0_1.eContents().get(0);
		private final Keyword cColumnsKeyword_2_0_1_1 = (Keyword)cGroup_2_0_1.eContents().get(1);
		private final Keyword cFromKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cEntityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEntityEntityNameParserRuleCall_3_0 = (RuleCall)cEntityAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWhereKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cConditionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_4_1_0 = (RuleCall)cConditionAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cGroupKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cByKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cGroupByListAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cGroupByListPropertyReferenceParserRuleCall_5_2_0 = (RuleCall)cGroupByListAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cGroupByListAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cGroupByListPropertyReferenceParserRuleCall_5_3_1_0 = (RuleCall)cGroupByListAssignment_5_3_1.eContents().get(0);
		
		//// Define the SelectStatement rule
		//SelectStatement:
		//    ('can' 'you')? 'show'
		//    (('the' 'columns:' SelectList | 'all' 'columns') 'from')
		//    entity=EntityName
		//    ('where' condition=Condition)?
		//    ('group' 'by' groupByList+=PropertyReference (',' groupByList+=PropertyReference)*)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('can' 'you')? 'show'
		//(('the' 'columns:' SelectList | 'all' 'columns') 'from')
		//entity=EntityName
		//('where' condition=Condition)?
		//('group' 'by' groupByList+=PropertyReference (',' groupByList+=PropertyReference)*)?
		public Group getGroup() { return cGroup; }
		
		//('can' 'you')?
		public Group getGroup_0() { return cGroup_0; }
		
		//'can'
		public Keyword getCanKeyword_0_0() { return cCanKeyword_0_0; }
		
		//'you'
		public Keyword getYouKeyword_0_1() { return cYouKeyword_0_1; }
		
		//'show'
		public Keyword getShowKeyword_1() { return cShowKeyword_1; }
		
		//(('the' 'columns:' SelectList | 'all' 'columns') 'from')
		public Group getGroup_2() { return cGroup_2; }
		
		//('the' 'columns:' SelectList | 'all' 'columns')
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//'the' 'columns:' SelectList
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }
		
		//'the'
		public Keyword getTheKeyword_2_0_0_0() { return cTheKeyword_2_0_0_0; }
		
		//'columns:'
		public Keyword getColumnsKeyword_2_0_0_1() { return cColumnsKeyword_2_0_0_1; }
		
		//SelectList
		public RuleCall getSelectListParserRuleCall_2_0_0_2() { return cSelectListParserRuleCall_2_0_0_2; }
		
		//'all' 'columns'
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//'all'
		public Keyword getAllKeyword_2_0_1_0() { return cAllKeyword_2_0_1_0; }
		
		//'columns'
		public Keyword getColumnsKeyword_2_0_1_1() { return cColumnsKeyword_2_0_1_1; }
		
		//'from'
		public Keyword getFromKeyword_2_1() { return cFromKeyword_2_1; }
		
		//entity=EntityName
		public Assignment getEntityAssignment_3() { return cEntityAssignment_3; }
		
		//EntityName
		public RuleCall getEntityEntityNameParserRuleCall_3_0() { return cEntityEntityNameParserRuleCall_3_0; }
		
		//('where' condition=Condition)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'where'
		public Keyword getWhereKeyword_4_0() { return cWhereKeyword_4_0; }
		
		//condition=Condition
		public Assignment getConditionAssignment_4_1() { return cConditionAssignment_4_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_4_1_0() { return cConditionConditionParserRuleCall_4_1_0; }
		
		//('group' 'by' groupByList+=PropertyReference (',' groupByList+=PropertyReference)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'group'
		public Keyword getGroupKeyword_5_0() { return cGroupKeyword_5_0; }
		
		//'by'
		public Keyword getByKeyword_5_1() { return cByKeyword_5_1; }
		
		//groupByList+=PropertyReference
		public Assignment getGroupByListAssignment_5_2() { return cGroupByListAssignment_5_2; }
		
		//PropertyReference
		public RuleCall getGroupByListPropertyReferenceParserRuleCall_5_2_0() { return cGroupByListPropertyReferenceParserRuleCall_5_2_0; }
		
		//(',' groupByList+=PropertyReference)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//','
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//groupByList+=PropertyReference
		public Assignment getGroupByListAssignment_5_3_1() { return cGroupByListAssignment_5_3_1; }
		
		//PropertyReference
		public RuleCall getGroupByListPropertyReferenceParserRuleCall_5_3_1_0() { return cGroupByListPropertyReferenceParserRuleCall_5_3_1_0; }
	}
	public class EntityNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.EntityName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cTheKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cTableKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		////// Define the InsertStatement rule
		////InsertStatement:
		////    ('can' 'you' 'please')? 'insert' 'into' entity=EntityName
		////    '(' propertyList+=PropertyName (',' propertyList+=PropertyName)* ')'
		////    'values' '(' valueList+=Value (',' valueList+=Value)* ')'
		////;
		////
		////// Define the UpdateStatement rule
		////UpdateStatement:
		////    ('can' 'you' 'please')? 'update' entity=EntityName
		////    'set' (updateItem+=UpdateItem (',' updateItem+=UpdateItem)*)
		////    ('where' condition=Condition)?
		////;
		////
		////// Define the DeleteStatement rule
		////DeleteStatement:
		////    ('can' 'you' 'please')? 'delete' 'from' entity=EntityName
		////    ('where' condition=Condition)?
		////;
		//// Define the EntityName rule
		//EntityName:
		//    ('the' 'table')? name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('the' 'table')? name=ID
		public Group getGroup() { return cGroup; }
		
		//('the' 'table')?
		public Group getGroup_0() { return cGroup_0; }
		
		//'the'
		public Keyword getTheKeyword_0_0() { return cTheKeyword_0_0; }
		
		//'table'
		public Keyword getTableKeyword_0_1() { return cTableKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class SelectListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.SelectList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectItemAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectItemPropertyParserRuleCall_0_0 = (RuleCall)cSelectItemAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSelectItemAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSelectItemPropertyParserRuleCall_1_1_0 = (RuleCall)cSelectItemAssignment_1_1.eContents().get(0);
		
		//// Define the SelectList rule
		//SelectList:
		//    selectItem+=Property (',' selectItem+=Property)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//selectItem+=Property (',' selectItem+=Property)*
		public Group getGroup() { return cGroup; }
		
		//selectItem+=Property
		public Assignment getSelectItemAssignment_0() { return cSelectItemAssignment_0; }
		
		//Property
		public RuleCall getSelectItemPropertyParserRuleCall_0_0() { return cSelectItemPropertyParserRuleCall_0_0; }
		
		//(',' selectItem+=Property)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//selectItem+=Property
		public Assignment getSelectItemAssignment_1_1() { return cSelectItemAssignment_1_1; }
		
		//Property
		public RuleCall getSelectItemPropertyParserRuleCall_1_1_0() { return cSelectItemPropertyParserRuleCall_1_1_0; }
	}
	public class PropertyReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.PropertyReference");
		private final Assignment cPropertyAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cPropertyPropertyCrossReference_0 = (CrossReference)cPropertyAssignment.eContents().get(0);
		private final RuleCall cPropertyPropertyIDTerminalRuleCall_0_1 = (RuleCall)cPropertyPropertyCrossReference_0.eContents().get(1);
		
		//// Define the PropertyReference rule
		//PropertyReference:
		//    property=[Property]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//property=[Property]
		public Assignment getPropertyAssignment() { return cPropertyAssignment; }
		
		//[Property]
		public CrossReference getPropertyPropertyCrossReference_0() { return cPropertyPropertyCrossReference_0; }
		
		//ID
		public RuleCall getPropertyPropertyIDTerminalRuleCall_0_1() { return cPropertyPropertyIDTerminalRuleCall_0_1; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTheKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cAKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// Define the Property rule
		//Property:
		//    ('the' | 'a')? name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('the' | 'a')? name=ID
		public Group getGroup() { return cGroup; }
		
		//('the' | 'a')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'the'
		public Keyword getTheKeyword_0_0() { return cTheKeyword_0_0; }
		
		//'a'
		public Keyword getAKeyword_0_1() { return cAKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cLogicOperatorParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// Define the Condition rule
		//Condition returns LogicExpressions:
		//    Comparison ({Comparison.left = current} LogicOperator right += Comparison)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({Comparison.left = current} LogicOperator right += Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({Comparison.left = current} LogicOperator right += Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparison.left = current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }
		
		//LogicOperator
		public RuleCall getLogicOperatorParserRuleCall_1_1() { return cLogicOperatorParserRuleCall_1_1; }
		
		//right += Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class LogicOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.LogicOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//// Define the LogicOperator rule
		//LogicOperator:
		//    'and' | 'or'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'and' | 'or'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'and'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//'or'
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTheKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cAKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cLeftHandSideAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cLeftHandSidePropertyCrossReference_1_0 = (CrossReference)cLeftHandSideAssignment_1.eContents().get(0);
		private final RuleCall cLeftHandSidePropertyIDTerminalRuleCall_1_0_1 = (RuleCall)cLeftHandSidePropertyCrossReference_1_0.eContents().get(1);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorComparisonOperatorParserRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cRightHandSideAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightHandSideValueParserRuleCall_3_0 = (RuleCall)cRightHandSideAssignment_3.eContents().get(0);
		
		//// Define the Comparison rule
		//Comparison returns LogicExpressions:
		//    ('the' | 'a')? leftHandSide=[Property] operator=ComparisonOperator rightHandSide=Value
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('the' | 'a')? leftHandSide=[Property] operator=ComparisonOperator rightHandSide=Value
		public Group getGroup() { return cGroup; }
		
		//('the' | 'a')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'the'
		public Keyword getTheKeyword_0_0() { return cTheKeyword_0_0; }
		
		//'a'
		public Keyword getAKeyword_0_1() { return cAKeyword_0_1; }
		
		//leftHandSide=[Property]
		public Assignment getLeftHandSideAssignment_1() { return cLeftHandSideAssignment_1; }
		
		//[Property]
		public CrossReference getLeftHandSidePropertyCrossReference_1_0() { return cLeftHandSidePropertyCrossReference_1_0; }
		
		//ID
		public RuleCall getLeftHandSidePropertyIDTerminalRuleCall_1_0_1() { return cLeftHandSidePropertyIDTerminalRuleCall_1_0_1; }
		
		//operator=ComparisonOperator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//ComparisonOperator
		public RuleCall getOperatorComparisonOperatorParserRuleCall_2_0() { return cOperatorComparisonOperatorParserRuleCall_2_0; }
		
		//rightHandSide=Value
		public Assignment getRightHandSideAssignment_3() { return cRightHandSideAssignment_3; }
		
		//Value
		public RuleCall getRightHandSideValueParserRuleCall_3_0() { return cRightHandSideValueParserRuleCall_3_0; }
	}
	public class ComparisonOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.ComparisonOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cIsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEqualKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cToKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cIsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cNotKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cEqualKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cToKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLessKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cThanKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cGreaterKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cThanKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLessKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cThanKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cOrKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cEqualKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cToKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cGreaterKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cThanKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cOrKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Keyword cEqualKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Keyword cToKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		
		//// Define the ComparisonOperator rule
		//ComparisonOperator:
		//    '=' | 'is' 'equal' 'to' | 'is' 'not' 'equal' 'to' | 'less' 'than' | 'greater' 'than' | 'less' 'than' 'or' 'equal' 'to' | 'greater' 'than' 'or' 'equal' 'to'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'=' | 'is' 'equal' 'to' | 'is' 'not' 'equal' 'to' | 'less' 'than' | 'greater' 'than' | 'less' 'than' 'or' 'equal' 'to' | 'greater' 'than' 'or' 'equal' 'to'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//'is' 'equal' 'to'
		public Group getGroup_1() { return cGroup_1; }
		
		//'is'
		public Keyword getIsKeyword_1_0() { return cIsKeyword_1_0; }
		
		//'equal'
		public Keyword getEqualKeyword_1_1() { return cEqualKeyword_1_1; }
		
		//'to'
		public Keyword getToKeyword_1_2() { return cToKeyword_1_2; }
		
		//'is' 'not' 'equal' 'to'
		public Group getGroup_2() { return cGroup_2; }
		
		//'is'
		public Keyword getIsKeyword_2_0() { return cIsKeyword_2_0; }
		
		//'not'
		public Keyword getNotKeyword_2_1() { return cNotKeyword_2_1; }
		
		//'equal'
		public Keyword getEqualKeyword_2_2() { return cEqualKeyword_2_2; }
		
		//'to'
		public Keyword getToKeyword_2_3() { return cToKeyword_2_3; }
		
		//'less' 'than'
		public Group getGroup_3() { return cGroup_3; }
		
		//'less'
		public Keyword getLessKeyword_3_0() { return cLessKeyword_3_0; }
		
		//'than'
		public Keyword getThanKeyword_3_1() { return cThanKeyword_3_1; }
		
		//'greater' 'than'
		public Group getGroup_4() { return cGroup_4; }
		
		//'greater'
		public Keyword getGreaterKeyword_4_0() { return cGreaterKeyword_4_0; }
		
		//'than'
		public Keyword getThanKeyword_4_1() { return cThanKeyword_4_1; }
		
		//'less' 'than' 'or' 'equal' 'to'
		public Group getGroup_5() { return cGroup_5; }
		
		//'less'
		public Keyword getLessKeyword_5_0() { return cLessKeyword_5_0; }
		
		//'than'
		public Keyword getThanKeyword_5_1() { return cThanKeyword_5_1; }
		
		//'or'
		public Keyword getOrKeyword_5_2() { return cOrKeyword_5_2; }
		
		//'equal'
		public Keyword getEqualKeyword_5_3() { return cEqualKeyword_5_3; }
		
		//'to'
		public Keyword getToKeyword_5_4() { return cToKeyword_5_4; }
		
		//'greater' 'than' 'or' 'equal' 'to'
		public Group getGroup_6() { return cGroup_6; }
		
		//'greater'
		public Keyword getGreaterKeyword_6_0() { return cGreaterKeyword_6_0; }
		
		//'than'
		public Keyword getThanKeyword_6_1() { return cThanKeyword_6_1; }
		
		//'or'
		public Keyword getOrKeyword_6_2() { return cOrKeyword_6_2; }
		
		//'equal'
		public Keyword getEqualKeyword_6_3() { return cEqualKeyword_6_3; }
		
		//'to'
		public Keyword getToKeyword_6_4() { return cToKeyword_6_4; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Define the Value rule
		//Value:
		//    INT | STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	
	
	private final AccountingSpeechElements pAccountingSpeech;
	private final StatementElements pStatement;
	private final SelectStatementElements pSelectStatement;
	private final EntityNameElements pEntityName;
	private final SelectListElements pSelectList;
	private final PropertyReferenceElements pPropertyReference;
	private final PropertyElements pProperty;
	private final ConditionElements pCondition;
	private final LogicOperatorElements pLogicOperator;
	private final ComparisonElements pComparison;
	private final ComparisonOperatorElements pComparisonOperator;
	private final ValueElements pValue;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public NlToSqlGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAccountingSpeech = new AccountingSpeechElements();
		this.pStatement = new StatementElements();
		this.pSelectStatement = new SelectStatementElements();
		this.pEntityName = new EntityNameElements();
		this.pSelectList = new SelectListElements();
		this.pPropertyReference = new PropertyReferenceElements();
		this.pProperty = new PropertyElements();
		this.pCondition = new ConditionElements();
		this.pLogicOperator = new LogicOperatorElements();
		this.pComparison = new ComparisonElements();
		this.pComparisonOperator = new ComparisonOperatorElements();
		this.pValue = new ValueElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.NlToSql".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Define the root rule
	//AccountingSpeech:
	//    statements += Statement*
	//;
	public AccountingSpeechElements getAccountingSpeechAccess() {
		return pAccountingSpeech;
	}
	
	public ParserRule getAccountingSpeechRule() {
		return getAccountingSpeechAccess().getRule();
	}
	
	//// Define the Statement rule
	//Statement:
	//    (SelectStatement)
	////        InsertStatement | UpdateStatement | DeleteStatement
	//    '.'
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//// Define the SelectStatement rule
	//SelectStatement:
	//    ('can' 'you')? 'show'
	//    (('the' 'columns:' SelectList | 'all' 'columns') 'from')
	//    entity=EntityName
	//    ('where' condition=Condition)?
	//    ('group' 'by' groupByList+=PropertyReference (',' groupByList+=PropertyReference)*)?
	//;
	public SelectStatementElements getSelectStatementAccess() {
		return pSelectStatement;
	}
	
	public ParserRule getSelectStatementRule() {
		return getSelectStatementAccess().getRule();
	}
	
	////// Define the InsertStatement rule
	////InsertStatement:
	////    ('can' 'you' 'please')? 'insert' 'into' entity=EntityName
	////    '(' propertyList+=PropertyName (',' propertyList+=PropertyName)* ')'
	////    'values' '(' valueList+=Value (',' valueList+=Value)* ')'
	////;
	////
	////// Define the UpdateStatement rule
	////UpdateStatement:
	////    ('can' 'you' 'please')? 'update' entity=EntityName
	////    'set' (updateItem+=UpdateItem (',' updateItem+=UpdateItem)*)
	////    ('where' condition=Condition)?
	////;
	////
	////// Define the DeleteStatement rule
	////DeleteStatement:
	////    ('can' 'you' 'please')? 'delete' 'from' entity=EntityName
	////    ('where' condition=Condition)?
	////;
	//// Define the EntityName rule
	//EntityName:
	//    ('the' 'table')? name=ID
	//;
	public EntityNameElements getEntityNameAccess() {
		return pEntityName;
	}
	
	public ParserRule getEntityNameRule() {
		return getEntityNameAccess().getRule();
	}
	
	//// Define the SelectList rule
	//SelectList:
	//    selectItem+=Property (',' selectItem+=Property)*
	//;
	public SelectListElements getSelectListAccess() {
		return pSelectList;
	}
	
	public ParserRule getSelectListRule() {
		return getSelectListAccess().getRule();
	}
	
	//// Define the PropertyReference rule
	//PropertyReference:
	//    property=[Property]
	//;
	public PropertyReferenceElements getPropertyReferenceAccess() {
		return pPropertyReference;
	}
	
	public ParserRule getPropertyReferenceRule() {
		return getPropertyReferenceAccess().getRule();
	}
	
	//// Define the Property rule
	//Property:
	//    ('the' | 'a')? name=ID
	//;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//// Define the Condition rule
	//Condition returns LogicExpressions:
	//    Comparison ({Comparison.left = current} LogicOperator right += Comparison)*
	//;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//// Define the LogicOperator rule
	//LogicOperator:
	//    'and' | 'or'
	//;
	public LogicOperatorElements getLogicOperatorAccess() {
		return pLogicOperator;
	}
	
	public ParserRule getLogicOperatorRule() {
		return getLogicOperatorAccess().getRule();
	}
	
	//// Define the Comparison rule
	//Comparison returns LogicExpressions:
	//    ('the' | 'a')? leftHandSide=[Property] operator=ComparisonOperator rightHandSide=Value
	//;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//// Define the ComparisonOperator rule
	//ComparisonOperator:
	//    '=' | 'is' 'equal' 'to' | 'is' 'not' 'equal' 'to' | 'less' 'than' | 'greater' 'than' | 'less' 'than' 'or' 'equal' 'to' | 'greater' 'than' 'or' 'equal' 'to'
	//;
	public ComparisonOperatorElements getComparisonOperatorAccess() {
		return pComparisonOperator;
	}
	
	public ParserRule getComparisonOperatorRule() {
		return getComparisonOperatorAccess().getRule();
	}
	
	//// Define the Value rule
	//Value:
	//    INT | STRING
	//;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
