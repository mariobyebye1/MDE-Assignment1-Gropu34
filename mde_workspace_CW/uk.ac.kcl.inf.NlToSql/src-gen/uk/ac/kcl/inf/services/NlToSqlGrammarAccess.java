/*
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class NlToSqlGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class AccountingSpeechElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.AccountingSpeech");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//// Define the root rule
		//AccountingSpeech:
		//    statements += Statement*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//statements += Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cCreateTableStatementParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cSelectStatementParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cInsertStatementParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cUpdateStatementParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//// Define the Statement rule
		//Statement:
		//    (CreateTableStatement | SelectStatement | InsertStatement | UpdateStatement)'.'
		////           | DeleteStatement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(CreateTableStatement | SelectStatement | InsertStatement | UpdateStatement)'.'
		public Group getGroup() { return cGroup; }
		
		//(CreateTableStatement | SelectStatement | InsertStatement | UpdateStatement)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//CreateTableStatement
		public RuleCall getCreateTableStatementParserRuleCall_0_0() { return cCreateTableStatementParserRuleCall_0_0; }
		
		//SelectStatement
		public RuleCall getSelectStatementParserRuleCall_0_1() { return cSelectStatementParserRuleCall_0_1; }
		
		//InsertStatement
		public RuleCall getInsertStatementParserRuleCall_0_2() { return cInsertStatementParserRuleCall_0_2; }
		
		//UpdateStatement
		public RuleCall getUpdateStatementParserRuleCall_0_3() { return cUpdateStatementParserRuleCall_0_3; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
	}
	public class CreateTableStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.CreateTableStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTheAParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cTableKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cCalledKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTableTableParserRuleCall_4_0 = (RuleCall)cTableAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWithKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColumnsKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cColumnsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cColumnsColumnListParserRuleCall_5_2_0 = (RuleCall)cColumnsAssignment_5_2.eContents().get(0);
		
		//// Define the table creation rule
		//CreateTableStatement:
		//  'Create' TheA 'table' 'called' table=Table
		//  ('with' 'columns' columns=ColumnList)?
		// ;
		@Override public ParserRule getRule() { return rule; }
		
		//'Create' TheA 'table' 'called' table=Table
		//('with' 'columns' columns=ColumnList)?
		public Group getGroup() { return cGroup; }
		
		//'Create'
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//TheA
		public RuleCall getTheAParserRuleCall_1() { return cTheAParserRuleCall_1; }
		
		//'table'
		public Keyword getTableKeyword_2() { return cTableKeyword_2; }
		
		//'called'
		public Keyword getCalledKeyword_3() { return cCalledKeyword_3; }
		
		//table=Table
		public Assignment getTableAssignment_4() { return cTableAssignment_4; }
		
		//Table
		public RuleCall getTableTableParserRuleCall_4_0() { return cTableTableParserRuleCall_4_0; }
		
		//('with' 'columns' columns=ColumnList)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'with'
		public Keyword getWithKeyword_5_0() { return cWithKeyword_5_0; }
		
		//'columns'
		public Keyword getColumnsKeyword_5_1() { return cColumnsKeyword_5_1; }
		
		//columns=ColumnList
		public Assignment getColumnsAssignment_5_2() { return cColumnsAssignment_5_2; }
		
		//ColumnList
		public RuleCall getColumnsColumnListParserRuleCall_5_2_0() { return cColumnsColumnListParserRuleCall_5_2_0; }
	}
	public class ColumnListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.ColumnList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColumnItemAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColumnItemColumnParserRuleCall_0_0 = (RuleCall)cColumnItemAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cColumnItemAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cColumnItemColumnParserRuleCall_1_1_0 = (RuleCall)cColumnItemAssignment_1_1.eContents().get(0);
		
		//// Define the ColumnList rule
		//ColumnList:
		//    columnItem+=Column (',' columnItem+=Column)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//columnItem+=Column (',' columnItem+=Column)*
		public Group getGroup() { return cGroup; }
		
		//columnItem+=Column
		public Assignment getColumnItemAssignment_0() { return cColumnItemAssignment_0; }
		
		//Column
		public RuleCall getColumnItemColumnParserRuleCall_0_0() { return cColumnItemColumnParserRuleCall_0_0; }
		
		//(',' columnItem+=Column)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//columnItem+=Column
		public Assignment getColumnItemAssignment_1_1() { return cColumnItemAssignment_1_1; }
		
		//Column
		public RuleCall getColumnItemColumnParserRuleCall_1_1_0() { return cColumnItemColumnParserRuleCall_1_1_0; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.Table");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Table:
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeDatatypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//Column:
		//  name=ID 'of' 'type' type=Datatype;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'of' 'type' type=Datatype
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'of'
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//type=Datatype
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//Datatype
		public RuleCall getTypeDatatypeParserRuleCall_3_0() { return cTypeDatatypeParserRuleCall_3_0; }
	}
	public class DatatypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.Datatype");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntegerKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDateKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Datatype:
		//  'integer' | 'string' | 'date'
		// ;
		@Override public ParserRule getRule() { return rule; }
		
		//'integer' | 'string' | 'date'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'integer'
		public Keyword getIntegerKeyword_0() { return cIntegerKeyword_0; }
		
		//'string'
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
		
		//'date'
		public Keyword getDateKeyword_2() { return cDateKeyword_2; }
	}
	public class SelectStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.SelectStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTheKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTableKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSelectTablesListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cShowKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cTheKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Keyword cColumnsKeyword_5_0_1 = (Keyword)cGroup_5_0.eContents().get(1);
		private final Assignment cColumnsAssignment_5_0_2 = (Assignment)cGroup_5_0.eContents().get(2);
		private final RuleCall cColumnsSelectColumnsListParserRuleCall_5_0_2_0 = (RuleCall)cColumnsAssignment_5_0_2.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cAllKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Keyword cColumnsKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWhereKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cConditionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_6_1_0 = (RuleCall)cConditionAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cGroupKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cByKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cGroupAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cGroupSelectColumnsListParserRuleCall_7_2_0 = (RuleCall)cGroupAssignment_7_2.eContents().get(0);
		
		//// Define the SelectStatement rule
		//SelectStatement:
		//    'From' 'the' 'table' SelectTablesList
		//    'show'
		//    ('the' 'columns:' columns = SelectColumnsList | 'all' 'columns')
		//    ('where' condition=Condition)?
		//    ('group' 'by' group = SelectColumnsList)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'From' 'the' 'table' SelectTablesList
		//'show'
		//('the' 'columns:' columns = SelectColumnsList | 'all' 'columns')
		//('where' condition=Condition)?
		//('group' 'by' group = SelectColumnsList)?
		public Group getGroup() { return cGroup; }
		
		//'From'
		public Keyword getFromKeyword_0() { return cFromKeyword_0; }
		
		//'the'
		public Keyword getTheKeyword_1() { return cTheKeyword_1; }
		
		//'table'
		public Keyword getTableKeyword_2() { return cTableKeyword_2; }
		
		//SelectTablesList
		public RuleCall getSelectTablesListParserRuleCall_3() { return cSelectTablesListParserRuleCall_3; }
		
		//'show'
		public Keyword getShowKeyword_4() { return cShowKeyword_4; }
		
		//('the' 'columns:' columns = SelectColumnsList | 'all' 'columns')
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'the' 'columns:' columns = SelectColumnsList
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'the'
		public Keyword getTheKeyword_5_0_0() { return cTheKeyword_5_0_0; }
		
		//'columns:'
		public Keyword getColumnsKeyword_5_0_1() { return cColumnsKeyword_5_0_1; }
		
		//columns = SelectColumnsList
		public Assignment getColumnsAssignment_5_0_2() { return cColumnsAssignment_5_0_2; }
		
		//SelectColumnsList
		public RuleCall getColumnsSelectColumnsListParserRuleCall_5_0_2_0() { return cColumnsSelectColumnsListParserRuleCall_5_0_2_0; }
		
		//'all' 'columns'
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//'all'
		public Keyword getAllKeyword_5_1_0() { return cAllKeyword_5_1_0; }
		
		//'columns'
		public Keyword getColumnsKeyword_5_1_1() { return cColumnsKeyword_5_1_1; }
		
		//('where' condition=Condition)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'where'
		public Keyword getWhereKeyword_6_0() { return cWhereKeyword_6_0; }
		
		//condition=Condition
		public Assignment getConditionAssignment_6_1() { return cConditionAssignment_6_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_6_1_0() { return cConditionConditionParserRuleCall_6_1_0; }
		
		//('group' 'by' group = SelectColumnsList)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'group'
		public Keyword getGroupKeyword_7_0() { return cGroupKeyword_7_0; }
		
		//'by'
		public Keyword getByKeyword_7_1() { return cByKeyword_7_1; }
		
		//group = SelectColumnsList
		public Assignment getGroupAssignment_7_2() { return cGroupAssignment_7_2; }
		
		//SelectColumnsList
		public RuleCall getGroupSelectColumnsListParserRuleCall_7_2_0() { return cGroupSelectColumnsListParserRuleCall_7_2_0; }
	}
	public class InsertStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.InsertStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInsertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIntoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTheTableParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSelectTableParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cForKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cTheKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColumnsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cColumnsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cColumnsSelectColumnsListParserRuleCall_7_0 = (RuleCall)cColumnsAssignment_7.eContents().get(0);
		private final Keyword cInsertKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cTheKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cValuesKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cValuesAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cValuesInserValuesParserRuleCall_12_0 = (RuleCall)cValuesAssignment_12.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//// Define the InsertStatement rule
		//InsertStatement:
		//     'Insert' 'into' TheTable SelectTable
		//    'for' 'the' 'columns' columns = SelectColumnsList
		//    'insert' 'the' 'values' '(' values = InserValues ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		// 'Insert' 'into' TheTable SelectTable
		//'for' 'the' 'columns' columns = SelectColumnsList
		//'insert' 'the' 'values' '(' values = InserValues ')'
		public Group getGroup() { return cGroup; }
		
		//'Insert'
		public Keyword getInsertKeyword_0() { return cInsertKeyword_0; }
		
		//'into'
		public Keyword getIntoKeyword_1() { return cIntoKeyword_1; }
		
		//TheTable
		public RuleCall getTheTableParserRuleCall_2() { return cTheTableParserRuleCall_2; }
		
		//SelectTable
		public RuleCall getSelectTableParserRuleCall_3() { return cSelectTableParserRuleCall_3; }
		
		//'for'
		public Keyword getForKeyword_4() { return cForKeyword_4; }
		
		//'the'
		public Keyword getTheKeyword_5() { return cTheKeyword_5; }
		
		//'columns'
		public Keyword getColumnsKeyword_6() { return cColumnsKeyword_6; }
		
		//columns = SelectColumnsList
		public Assignment getColumnsAssignment_7() { return cColumnsAssignment_7; }
		
		//SelectColumnsList
		public RuleCall getColumnsSelectColumnsListParserRuleCall_7_0() { return cColumnsSelectColumnsListParserRuleCall_7_0; }
		
		//'insert'
		public Keyword getInsertKeyword_8() { return cInsertKeyword_8; }
		
		//'the'
		public Keyword getTheKeyword_9() { return cTheKeyword_9; }
		
		//'values'
		public Keyword getValuesKeyword_10() { return cValuesKeyword_10; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_11() { return cLeftParenthesisKeyword_11; }
		
		//values = InserValues
		public Assignment getValuesAssignment_12() { return cValuesAssignment_12; }
		
		//InserValues
		public RuleCall getValuesInserValuesParserRuleCall_12_0() { return cValuesInserValuesParserRuleCall_12_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_13() { return cRightParenthesisKeyword_13; }
	}
	public class UpdateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.UpdateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUpdateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTheTableParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cSelectTableParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSetKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cUpdatesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUpdatesSelectUpdateListParserRuleCall_5_0 = (RuleCall)cUpdatesAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWhereKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cConditionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_6_1_0 = (RuleCall)cConditionAssignment_6_1.eContents().get(0);
		
		//// Define the UpdateStatement rule
		//UpdateStatement:
		//    'Update' TheTable SelectTable
		//    'to''set' updates = SelectUpdateList
		//    ('where' condition=Condition)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Update' TheTable SelectTable
		//'to''set' updates = SelectUpdateList
		//('where' condition=Condition)?
		public Group getGroup() { return cGroup; }
		
		//'Update'
		public Keyword getUpdateKeyword_0() { return cUpdateKeyword_0; }
		
		//TheTable
		public RuleCall getTheTableParserRuleCall_1() { return cTheTableParserRuleCall_1; }
		
		//SelectTable
		public RuleCall getSelectTableParserRuleCall_2() { return cSelectTableParserRuleCall_2; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//'set'
		public Keyword getSetKeyword_4() { return cSetKeyword_4; }
		
		//updates = SelectUpdateList
		public Assignment getUpdatesAssignment_5() { return cUpdatesAssignment_5; }
		
		//SelectUpdateList
		public RuleCall getUpdatesSelectUpdateListParserRuleCall_5_0() { return cUpdatesSelectUpdateListParserRuleCall_5_0; }
		
		//('where' condition=Condition)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'where'
		public Keyword getWhereKeyword_6_0() { return cWhereKeyword_6_0; }
		
		//condition=Condition
		public Assignment getConditionAssignment_6_1() { return cConditionAssignment_6_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_6_1_0() { return cConditionConditionParserRuleCall_6_1_0; }
	}
	public class SelectUpdateListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.SelectUpdateList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUpdateItemAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUpdateItemUpdateItemParserRuleCall_0_0 = (RuleCall)cUpdateItemAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cUpdateItemAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUpdateItemUpdateItemParserRuleCall_1_1_0 = (RuleCall)cUpdateItemAssignment_1_1.eContents().get(0);
		
		//SelectUpdateList:
		//    updateItem+=UpdateItem (',' updateItem+=UpdateItem)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//updateItem+=UpdateItem (',' updateItem+=UpdateItem)*
		public Group getGroup() { return cGroup; }
		
		//updateItem+=UpdateItem
		public Assignment getUpdateItemAssignment_0() { return cUpdateItemAssignment_0; }
		
		//UpdateItem
		public RuleCall getUpdateItemUpdateItemParserRuleCall_0_0() { return cUpdateItemUpdateItemParserRuleCall_0_0; }
		
		//(',' updateItem+=UpdateItem)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//updateItem+=UpdateItem
		public Assignment getUpdateItemAssignment_1_1() { return cUpdateItemAssignment_1_1; }
		
		//UpdateItem
		public RuleCall getUpdateItemUpdateItemParserRuleCall_1_1_0() { return cUpdateItemUpdateItemParserRuleCall_1_1_0; }
	}
	public class UpdateItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.UpdateItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTheAParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cColumnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColumnColumnReferenceParserRuleCall_1_0 = (RuleCall)cColumnAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//// Define the UpdateItem rule
		//UpdateItem:
		//    (TheA column=ColumnReference '=' value=Value)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(TheA column=ColumnReference '=' value=Value)
		public Group getGroup() { return cGroup; }
		
		//TheA
		public RuleCall getTheAParserRuleCall_0() { return cTheAParserRuleCall_0; }
		
		//column=ColumnReference
		public Assignment getColumnAssignment_1() { return cColumnAssignment_1; }
		
		//ColumnReference
		public RuleCall getColumnColumnReferenceParserRuleCall_1_0() { return cColumnColumnReferenceParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=Value
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_3_0() { return cValueValueParserRuleCall_3_0; }
	}
	public class InserValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.InserValues");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueListValueParserRuleCall_0_0 = (RuleCall)cValueListAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueListValueParserRuleCall_1_1_0 = (RuleCall)cValueListAssignment_1_1.eContents().get(0);
		
		//InserValues:
		//    valueList+=Value (',' valueList+=Value)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//valueList+=Value (',' valueList+=Value)*
		public Group getGroup() { return cGroup; }
		
		//valueList+=Value
		public Assignment getValueListAssignment_0() { return cValueListAssignment_0; }
		
		//Value
		public RuleCall getValueListValueParserRuleCall_0_0() { return cValueListValueParserRuleCall_0_0; }
		
		//(',' valueList+=Value)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//valueList+=Value
		public Assignment getValueListAssignment_1_1() { return cValueListAssignment_1_1; }
		
		//Value
		public RuleCall getValueListValueParserRuleCall_1_1_0() { return cValueListValueParserRuleCall_1_1_0; }
	}
	public class SelectTablesListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.SelectTablesList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectTableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSelectTableTableCrossReference_0_0 = (CrossReference)cSelectTableAssignment_0.eContents().get(0);
		private final RuleCall cSelectTableTableIDTerminalRuleCall_0_0_1 = (RuleCall)cSelectTableTableCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSelectTableAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cSelectTableTableCrossReference_1_1_0 = (CrossReference)cSelectTableAssignment_1_1.eContents().get(0);
		private final RuleCall cSelectTableTableIDTerminalRuleCall_1_1_0_1 = (RuleCall)cSelectTableTableCrossReference_1_1_0.eContents().get(1);
		
		//SelectTablesList:
		//    selectTable+=[Table] (',' selectTable+=[Table])*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//selectTable+=[Table] (',' selectTable+=[Table])*
		public Group getGroup() { return cGroup; }
		
		//selectTable+=[Table]
		public Assignment getSelectTableAssignment_0() { return cSelectTableAssignment_0; }
		
		//[Table]
		public CrossReference getSelectTableTableCrossReference_0_0() { return cSelectTableTableCrossReference_0_0; }
		
		//ID
		public RuleCall getSelectTableTableIDTerminalRuleCall_0_0_1() { return cSelectTableTableIDTerminalRuleCall_0_0_1; }
		
		//(',' selectTable+=[Table])*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//selectTable+=[Table]
		public Assignment getSelectTableAssignment_1_1() { return cSelectTableAssignment_1_1; }
		
		//[Table]
		public CrossReference getSelectTableTableCrossReference_1_1_0() { return cSelectTableTableCrossReference_1_1_0; }
		
		//ID
		public RuleCall getSelectTableTableIDTerminalRuleCall_1_1_0_1() { return cSelectTableTableIDTerminalRuleCall_1_1_0_1; }
	}
	public class SelectTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.SelectTable");
		private final Assignment cTableAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTableTableCrossReference_0 = (CrossReference)cTableAssignment.eContents().get(0);
		private final RuleCall cTableTableIDTerminalRuleCall_0_1 = (RuleCall)cTableTableCrossReference_0.eContents().get(1);
		
		//SelectTable:
		//    table = [Table]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//table = [Table]
		public Assignment getTableAssignment() { return cTableAssignment; }
		
		//[Table]
		public CrossReference getTableTableCrossReference_0() { return cTableTableCrossReference_0; }
		
		//ID
		public RuleCall getTableTableIDTerminalRuleCall_0_1() { return cTableTableIDTerminalRuleCall_0_1; }
	}
	public class SelectColumnsListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.SelectColumnsList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectColumnAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectColumnColumnReferenceParserRuleCall_0_0 = (RuleCall)cSelectColumnAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSelectColumnAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSelectColumnColumnReferenceParserRuleCall_1_1_0 = (RuleCall)cSelectColumnAssignment_1_1.eContents().get(0);
		
		//// Define the SelectList rule
		//SelectColumnsList:
		//    selectColumn+=ColumnReference (',' selectColumn+=ColumnReference)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//selectColumn+=ColumnReference (',' selectColumn+=ColumnReference)*
		public Group getGroup() { return cGroup; }
		
		//selectColumn+=ColumnReference
		public Assignment getSelectColumnAssignment_0() { return cSelectColumnAssignment_0; }
		
		//ColumnReference
		public RuleCall getSelectColumnColumnReferenceParserRuleCall_0_0() { return cSelectColumnColumnReferenceParserRuleCall_0_0; }
		
		//(',' selectColumn+=ColumnReference)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//selectColumn+=ColumnReference
		public Assignment getSelectColumnAssignment_1_1() { return cSelectColumnAssignment_1_1; }
		
		//ColumnReference
		public RuleCall getSelectColumnColumnReferenceParserRuleCall_1_1_0() { return cSelectColumnColumnReferenceParserRuleCall_1_1_0; }
	}
	public class ColumnReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.ColumnReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColumnAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cColumnColumnCrossReference_0_0 = (CrossReference)cColumnAssignment_0.eContents().get(0);
		private final RuleCall cColumnColumnIDTerminalRuleCall_0_0_1 = (RuleCall)cColumnColumnCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cInKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTableAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTableTableCrossReference_1_1_0 = (CrossReference)cTableAssignment_1_1.eContents().get(0);
		private final RuleCall cTableTableIDTerminalRuleCall_1_1_0_1 = (RuleCall)cTableTableCrossReference_1_1_0.eContents().get(1);
		
		//ColumnReference:
		//    column=[Column] ('in' table=[Table])?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//column=[Column] ('in' table=[Table])?
		public Group getGroup() { return cGroup; }
		
		//column=[Column]
		public Assignment getColumnAssignment_0() { return cColumnAssignment_0; }
		
		//[Column]
		public CrossReference getColumnColumnCrossReference_0_0() { return cColumnColumnCrossReference_0_0; }
		
		//ID
		public RuleCall getColumnColumnIDTerminalRuleCall_0_0_1() { return cColumnColumnIDTerminalRuleCall_0_0_1; }
		
		//('in' table=[Table])?
		public Group getGroup_1() { return cGroup_1; }
		
		//'in'
		public Keyword getInKeyword_1_0() { return cInKeyword_1_0; }
		
		//table=[Table]
		public Assignment getTableAssignment_1_1() { return cTableAssignment_1_1; }
		
		//[Table]
		public CrossReference getTableTableCrossReference_1_1_0() { return cTableTableCrossReference_1_1_0; }
		
		//ID
		public RuleCall getTableTableIDTerminalRuleCall_1_1_0_1() { return cTableTableIDTerminalRuleCall_1_1_0_1; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cLogicOperatorParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// Define the Condition rule
		//Condition returns LogicExpressions:
		//    Comparison ({Comparison.left = current} LogicOperator right += Comparison)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({Comparison.left = current} LogicOperator right += Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({Comparison.left = current} LogicOperator right += Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparison.left = current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }
		
		//LogicOperator
		public RuleCall getLogicOperatorParserRuleCall_1_1() { return cLogicOperatorParserRuleCall_1_1; }
		
		//right += Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class LogicOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.LogicOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//// Define the LogicOperator rule
		//LogicOperator:
		//    'and' | 'or'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'and' | 'or'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'and'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//'or'
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTheKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cAKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cLeftHandSideAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cLeftHandSideColumnCrossReference_1_0 = (CrossReference)cLeftHandSideAssignment_1.eContents().get(0);
		private final RuleCall cLeftHandSideColumnIDTerminalRuleCall_1_0_1 = (RuleCall)cLeftHandSideColumnCrossReference_1_0.eContents().get(1);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorComparisonOperatorParserRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cRightHandSideAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightHandSideValueParserRuleCall_3_0 = (RuleCall)cRightHandSideAssignment_3.eContents().get(0);
		
		//// Define the Comparison rule
		//Comparison returns LogicExpressions:
		//    ('the' | 'a')? leftHandSide=[Column] operator=ComparisonOperator rightHandSide=Value
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('the' | 'a')? leftHandSide=[Column] operator=ComparisonOperator rightHandSide=Value
		public Group getGroup() { return cGroup; }
		
		//('the' | 'a')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'the'
		public Keyword getTheKeyword_0_0() { return cTheKeyword_0_0; }
		
		//'a'
		public Keyword getAKeyword_0_1() { return cAKeyword_0_1; }
		
		//leftHandSide=[Column]
		public Assignment getLeftHandSideAssignment_1() { return cLeftHandSideAssignment_1; }
		
		//[Column]
		public CrossReference getLeftHandSideColumnCrossReference_1_0() { return cLeftHandSideColumnCrossReference_1_0; }
		
		//ID
		public RuleCall getLeftHandSideColumnIDTerminalRuleCall_1_0_1() { return cLeftHandSideColumnIDTerminalRuleCall_1_0_1; }
		
		//operator=ComparisonOperator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//ComparisonOperator
		public RuleCall getOperatorComparisonOperatorParserRuleCall_2_0() { return cOperatorComparisonOperatorParserRuleCall_2_0; }
		
		//rightHandSide=Value
		public Assignment getRightHandSideAssignment_3() { return cRightHandSideAssignment_3; }
		
		//Value
		public RuleCall getRightHandSideValueParserRuleCall_3_0() { return cRightHandSideValueParserRuleCall_3_0; }
	}
	public class ComparisonOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.ComparisonOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cIsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEqualKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cToKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cIsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cNotKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cEqualKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cToKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLessKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cThanKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cGreaterKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cThanKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLessKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cThanKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cOrKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cEqualKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cToKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cGreaterKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cThanKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cOrKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Keyword cEqualKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Keyword cToKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		
		//// Define the ComparisonOperator rule
		//ComparisonOperator:
		//    '=' | 'is' 'equal' 'to' | 'is' 'not' 'equal' 'to' | 'less' 'than' | 'greater' 'than' | 'less' 'than' 'or' 'equal' 'to' | 'greater' 'than' 'or' 'equal' 'to'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'=' | 'is' 'equal' 'to' | 'is' 'not' 'equal' 'to' | 'less' 'than' | 'greater' 'than' | 'less' 'than' 'or' 'equal' 'to' | 'greater' 'than' 'or' 'equal' 'to'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//'is' 'equal' 'to'
		public Group getGroup_1() { return cGroup_1; }
		
		//'is'
		public Keyword getIsKeyword_1_0() { return cIsKeyword_1_0; }
		
		//'equal'
		public Keyword getEqualKeyword_1_1() { return cEqualKeyword_1_1; }
		
		//'to'
		public Keyword getToKeyword_1_2() { return cToKeyword_1_2; }
		
		//'is' 'not' 'equal' 'to'
		public Group getGroup_2() { return cGroup_2; }
		
		//'is'
		public Keyword getIsKeyword_2_0() { return cIsKeyword_2_0; }
		
		//'not'
		public Keyword getNotKeyword_2_1() { return cNotKeyword_2_1; }
		
		//'equal'
		public Keyword getEqualKeyword_2_2() { return cEqualKeyword_2_2; }
		
		//'to'
		public Keyword getToKeyword_2_3() { return cToKeyword_2_3; }
		
		//'less' 'than'
		public Group getGroup_3() { return cGroup_3; }
		
		//'less'
		public Keyword getLessKeyword_3_0() { return cLessKeyword_3_0; }
		
		//'than'
		public Keyword getThanKeyword_3_1() { return cThanKeyword_3_1; }
		
		//'greater' 'than'
		public Group getGroup_4() { return cGroup_4; }
		
		//'greater'
		public Keyword getGreaterKeyword_4_0() { return cGreaterKeyword_4_0; }
		
		//'than'
		public Keyword getThanKeyword_4_1() { return cThanKeyword_4_1; }
		
		//'less' 'than' 'or' 'equal' 'to'
		public Group getGroup_5() { return cGroup_5; }
		
		//'less'
		public Keyword getLessKeyword_5_0() { return cLessKeyword_5_0; }
		
		//'than'
		public Keyword getThanKeyword_5_1() { return cThanKeyword_5_1; }
		
		//'or'
		public Keyword getOrKeyword_5_2() { return cOrKeyword_5_2; }
		
		//'equal'
		public Keyword getEqualKeyword_5_3() { return cEqualKeyword_5_3; }
		
		//'to'
		public Keyword getToKeyword_5_4() { return cToKeyword_5_4; }
		
		//'greater' 'than' 'or' 'equal' 'to'
		public Group getGroup_6() { return cGroup_6; }
		
		//'greater'
		public Keyword getGreaterKeyword_6_0() { return cGreaterKeyword_6_0; }
		
		//'than'
		public Keyword getThanKeyword_6_1() { return cThanKeyword_6_1; }
		
		//'or'
		public Keyword getOrKeyword_6_2() { return cOrKeyword_6_2; }
		
		//'equal'
		public Keyword getEqualKeyword_6_3() { return cEqualKeyword_6_3; }
		
		//'to'
		public Keyword getToKeyword_6_4() { return cToKeyword_6_4; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Define the Value rule
		//Value:
		//    INT | STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	public class TheTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.TheTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTableKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//TheTable:
		//    ('the' 'table')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('the' 'table')?
		public Group getGroup() { return cGroup; }
		
		//'the'
		public Keyword getTheKeyword_0() { return cTheKeyword_0; }
		
		//'table'
		public Keyword getTableKeyword_1() { return cTableKeyword_1; }
	}
	public class TheAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.TheA");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTheKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//TheA:
		//    ('the' | 'a')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('the' | 'a')?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'the'
		public Keyword getTheKeyword_0() { return cTheKeyword_0; }
		
		//'a'
		public Keyword getAKeyword_1() { return cAKeyword_1; }
	}
	
	
	private final AccountingSpeechElements pAccountingSpeech;
	private final StatementElements pStatement;
	private final CreateTableStatementElements pCreateTableStatement;
	private final ColumnListElements pColumnList;
	private final TableElements pTable;
	private final ColumnElements pColumn;
	private final DatatypeElements pDatatype;
	private final SelectStatementElements pSelectStatement;
	private final InsertStatementElements pInsertStatement;
	private final UpdateStatementElements pUpdateStatement;
	private final SelectUpdateListElements pSelectUpdateList;
	private final UpdateItemElements pUpdateItem;
	private final InserValuesElements pInserValues;
	private final SelectTablesListElements pSelectTablesList;
	private final SelectTableElements pSelectTable;
	private final SelectColumnsListElements pSelectColumnsList;
	private final ColumnReferenceElements pColumnReference;
	private final ConditionElements pCondition;
	private final LogicOperatorElements pLogicOperator;
	private final ComparisonElements pComparison;
	private final ComparisonOperatorElements pComparisonOperator;
	private final ValueElements pValue;
	private final TheTableElements pTheTable;
	private final TheAElements pTheA;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public NlToSqlGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAccountingSpeech = new AccountingSpeechElements();
		this.pStatement = new StatementElements();
		this.pCreateTableStatement = new CreateTableStatementElements();
		this.pColumnList = new ColumnListElements();
		this.pTable = new TableElements();
		this.pColumn = new ColumnElements();
		this.pDatatype = new DatatypeElements();
		this.pSelectStatement = new SelectStatementElements();
		this.pInsertStatement = new InsertStatementElements();
		this.pUpdateStatement = new UpdateStatementElements();
		this.pSelectUpdateList = new SelectUpdateListElements();
		this.pUpdateItem = new UpdateItemElements();
		this.pInserValues = new InserValuesElements();
		this.pSelectTablesList = new SelectTablesListElements();
		this.pSelectTable = new SelectTableElements();
		this.pSelectColumnsList = new SelectColumnsListElements();
		this.pColumnReference = new ColumnReferenceElements();
		this.pCondition = new ConditionElements();
		this.pLogicOperator = new LogicOperatorElements();
		this.pComparison = new ComparisonElements();
		this.pComparisonOperator = new ComparisonOperatorElements();
		this.pValue = new ValueElements();
		this.pTheTable = new TheTableElements();
		this.pTheA = new TheAElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.NlToSql".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Define the root rule
	//AccountingSpeech:
	//    statements += Statement*
	//;
	public AccountingSpeechElements getAccountingSpeechAccess() {
		return pAccountingSpeech;
	}
	
	public ParserRule getAccountingSpeechRule() {
		return getAccountingSpeechAccess().getRule();
	}
	
	//// Define the Statement rule
	//Statement:
	//    (CreateTableStatement | SelectStatement | InsertStatement | UpdateStatement)'.'
	////           | DeleteStatement
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//// Define the table creation rule
	//CreateTableStatement:
	//  'Create' TheA 'table' 'called' table=Table
	//  ('with' 'columns' columns=ColumnList)?
	// ;
	public CreateTableStatementElements getCreateTableStatementAccess() {
		return pCreateTableStatement;
	}
	
	public ParserRule getCreateTableStatementRule() {
		return getCreateTableStatementAccess().getRule();
	}
	
	//// Define the ColumnList rule
	//ColumnList:
	//    columnItem+=Column (',' columnItem+=Column)*
	//;
	public ColumnListElements getColumnListAccess() {
		return pColumnList;
	}
	
	public ParserRule getColumnListRule() {
		return getColumnListAccess().getRule();
	}
	
	//Table:
	//    name=ID
	//;
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//Column:
	//  name=ID 'of' 'type' type=Datatype;
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}
	
	//Datatype:
	//  'integer' | 'string' | 'date'
	// ;
	public DatatypeElements getDatatypeAccess() {
		return pDatatype;
	}
	
	public ParserRule getDatatypeRule() {
		return getDatatypeAccess().getRule();
	}
	
	//// Define the SelectStatement rule
	//SelectStatement:
	//    'From' 'the' 'table' SelectTablesList
	//    'show'
	//    ('the' 'columns:' columns = SelectColumnsList | 'all' 'columns')
	//    ('where' condition=Condition)?
	//    ('group' 'by' group = SelectColumnsList)?
	//;
	public SelectStatementElements getSelectStatementAccess() {
		return pSelectStatement;
	}
	
	public ParserRule getSelectStatementRule() {
		return getSelectStatementAccess().getRule();
	}
	
	//// Define the InsertStatement rule
	//InsertStatement:
	//     'Insert' 'into' TheTable SelectTable
	//    'for' 'the' 'columns' columns = SelectColumnsList
	//    'insert' 'the' 'values' '(' values = InserValues ')'
	//;
	public InsertStatementElements getInsertStatementAccess() {
		return pInsertStatement;
	}
	
	public ParserRule getInsertStatementRule() {
		return getInsertStatementAccess().getRule();
	}
	
	//// Define the UpdateStatement rule
	//UpdateStatement:
	//    'Update' TheTable SelectTable
	//    'to''set' updates = SelectUpdateList
	//    ('where' condition=Condition)?
	//;
	public UpdateStatementElements getUpdateStatementAccess() {
		return pUpdateStatement;
	}
	
	public ParserRule getUpdateStatementRule() {
		return getUpdateStatementAccess().getRule();
	}
	
	//SelectUpdateList:
	//    updateItem+=UpdateItem (',' updateItem+=UpdateItem)*
	//;
	public SelectUpdateListElements getSelectUpdateListAccess() {
		return pSelectUpdateList;
	}
	
	public ParserRule getSelectUpdateListRule() {
		return getSelectUpdateListAccess().getRule();
	}
	
	//// Define the UpdateItem rule
	//UpdateItem:
	//    (TheA column=ColumnReference '=' value=Value)
	//;
	public UpdateItemElements getUpdateItemAccess() {
		return pUpdateItem;
	}
	
	public ParserRule getUpdateItemRule() {
		return getUpdateItemAccess().getRule();
	}
	
	//InserValues:
	//    valueList+=Value (',' valueList+=Value)*
	//;
	public InserValuesElements getInserValuesAccess() {
		return pInserValues;
	}
	
	public ParserRule getInserValuesRule() {
		return getInserValuesAccess().getRule();
	}
	
	//SelectTablesList:
	//    selectTable+=[Table] (',' selectTable+=[Table])*
	//;
	public SelectTablesListElements getSelectTablesListAccess() {
		return pSelectTablesList;
	}
	
	public ParserRule getSelectTablesListRule() {
		return getSelectTablesListAccess().getRule();
	}
	
	//SelectTable:
	//    table = [Table]
	//;
	public SelectTableElements getSelectTableAccess() {
		return pSelectTable;
	}
	
	public ParserRule getSelectTableRule() {
		return getSelectTableAccess().getRule();
	}
	
	//// Define the SelectList rule
	//SelectColumnsList:
	//    selectColumn+=ColumnReference (',' selectColumn+=ColumnReference)*
	//;
	public SelectColumnsListElements getSelectColumnsListAccess() {
		return pSelectColumnsList;
	}
	
	public ParserRule getSelectColumnsListRule() {
		return getSelectColumnsListAccess().getRule();
	}
	
	//ColumnReference:
	//    column=[Column] ('in' table=[Table])?
	//;
	public ColumnReferenceElements getColumnReferenceAccess() {
		return pColumnReference;
	}
	
	public ParserRule getColumnReferenceRule() {
		return getColumnReferenceAccess().getRule();
	}
	
	//// Define the Condition rule
	//Condition returns LogicExpressions:
	//    Comparison ({Comparison.left = current} LogicOperator right += Comparison)*
	//;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//// Define the LogicOperator rule
	//LogicOperator:
	//    'and' | 'or'
	//;
	public LogicOperatorElements getLogicOperatorAccess() {
		return pLogicOperator;
	}
	
	public ParserRule getLogicOperatorRule() {
		return getLogicOperatorAccess().getRule();
	}
	
	//// Define the Comparison rule
	//Comparison returns LogicExpressions:
	//    ('the' | 'a')? leftHandSide=[Column] operator=ComparisonOperator rightHandSide=Value
	//;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//// Define the ComparisonOperator rule
	//ComparisonOperator:
	//    '=' | 'is' 'equal' 'to' | 'is' 'not' 'equal' 'to' | 'less' 'than' | 'greater' 'than' | 'less' 'than' 'or' 'equal' 'to' | 'greater' 'than' 'or' 'equal' 'to'
	//;
	public ComparisonOperatorElements getComparisonOperatorAccess() {
		return pComparisonOperator;
	}
	
	public ParserRule getComparisonOperatorRule() {
		return getComparisonOperatorAccess().getRule();
	}
	
	//// Define the Value rule
	//Value:
	//    INT | STRING
	//;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//TheTable:
	//    ('the' 'table')?
	//;
	public TheTableElements getTheTableAccess() {
		return pTheTable;
	}
	
	public ParserRule getTheTableRule() {
		return getTheTableAccess().getRule();
	}
	
	//TheA:
	//    ('the' | 'a')?
	//;
	public TheAElements getTheAAccess() {
		return pTheA;
	}
	
	public ParserRule getTheARule() {
		return getTheAAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
