/*
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class NlToSqlGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class AccountingSpeechElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.AccountingSpeech");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//// Define the root rule
		//AccountingSpeech:
		//    statements += Statement*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//statements += Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cCreateTableStatementParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cSelectStatementParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cInsertStatementParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cUpdateStatementParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cDeleteStatementParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//// Define the Statement rule
		//Statement:
		//    (CreateTableStatement | SelectStatement | InsertStatement | UpdateStatement | DeleteStatement)'.'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(CreateTableStatement | SelectStatement | InsertStatement | UpdateStatement | DeleteStatement)'.'
		public Group getGroup() { return cGroup; }
		
		//(CreateTableStatement | SelectStatement | InsertStatement | UpdateStatement | DeleteStatement)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//CreateTableStatement
		public RuleCall getCreateTableStatementParserRuleCall_0_0() { return cCreateTableStatementParserRuleCall_0_0; }
		
		//SelectStatement
		public RuleCall getSelectStatementParserRuleCall_0_1() { return cSelectStatementParserRuleCall_0_1; }
		
		//InsertStatement
		public RuleCall getInsertStatementParserRuleCall_0_2() { return cInsertStatementParserRuleCall_0_2; }
		
		//UpdateStatement
		public RuleCall getUpdateStatementParserRuleCall_0_3() { return cUpdateStatementParserRuleCall_0_3; }
		
		//DeleteStatement
		public RuleCall getDeleteStatementParserRuleCall_0_4() { return cDeleteStatementParserRuleCall_0_4; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
	}
	public class CreateTableStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.CreateTableStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTableKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCalledKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTableTableParserRuleCall_3_0 = (RuleCall)cTableAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWithKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColumnsKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cColumnsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cColumnsColumnListParserRuleCall_4_2_0 = (RuleCall)cColumnsAssignment_4_2.eContents().get(0);
		
		//// Define the table creation rule
		//CreateTableStatement:
		//  'Create' 'table' 'called' table=Table
		//  ('with' 'columns' columns=ColumnList)?
		// ;
		@Override public ParserRule getRule() { return rule; }
		
		//'Create' 'table' 'called' table=Table
		//('with' 'columns' columns=ColumnList)?
		public Group getGroup() { return cGroup; }
		
		//'Create'
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//'table'
		public Keyword getTableKeyword_1() { return cTableKeyword_1; }
		
		//'called'
		public Keyword getCalledKeyword_2() { return cCalledKeyword_2; }
		
		//table=Table
		public Assignment getTableAssignment_3() { return cTableAssignment_3; }
		
		//Table
		public RuleCall getTableTableParserRuleCall_3_0() { return cTableTableParserRuleCall_3_0; }
		
		//('with' 'columns' columns=ColumnList)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'with'
		public Keyword getWithKeyword_4_0() { return cWithKeyword_4_0; }
		
		//'columns'
		public Keyword getColumnsKeyword_4_1() { return cColumnsKeyword_4_1; }
		
		//columns=ColumnList
		public Assignment getColumnsAssignment_4_2() { return cColumnsAssignment_4_2; }
		
		//ColumnList
		public RuleCall getColumnsColumnListParserRuleCall_4_2_0() { return cColumnsColumnListParserRuleCall_4_2_0; }
	}
	public class ColumnListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.ColumnList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColumnItemAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColumnItemColumnParserRuleCall_0_0 = (RuleCall)cColumnItemAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cColumnItemAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cColumnItemColumnParserRuleCall_1_1_0 = (RuleCall)cColumnItemAssignment_1_1.eContents().get(0);
		
		//// Define the ColumnList rule
		//ColumnList:
		//    columnItem+=Column (',' columnItem+=Column)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//columnItem+=Column (',' columnItem+=Column)*
		public Group getGroup() { return cGroup; }
		
		//columnItem+=Column
		public Assignment getColumnItemAssignment_0() { return cColumnItemAssignment_0; }
		
		//Column
		public RuleCall getColumnItemColumnParserRuleCall_0_0() { return cColumnItemColumnParserRuleCall_0_0; }
		
		//(',' columnItem+=Column)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//columnItem+=Column
		public Assignment getColumnItemAssignment_1_1() { return cColumnItemAssignment_1_1; }
		
		//Column
		public RuleCall getColumnItemColumnParserRuleCall_1_1_0() { return cColumnItemColumnParserRuleCall_1_1_0; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.Table");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Table:
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeDatatypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cTableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTableTableCrossReference_4_0 = (CrossReference)cTableAssignment_4.eContents().get(0);
		private final RuleCall cTableTableIDTerminalRuleCall_4_0_1 = (RuleCall)cTableTableCrossReference_4_0.eContents().get(1);
		
		//Column:
		//  name=ID 'of' 'type' type=Datatype (table=[Table])?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'of' 'type' type=Datatype (table=[Table])?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'of'
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//type=Datatype
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//Datatype
		public RuleCall getTypeDatatypeEnumRuleCall_3_0() { return cTypeDatatypeEnumRuleCall_3_0; }
		
		//(table=[Table])?
		public Assignment getTableAssignment_4() { return cTableAssignment_4; }
		
		//[Table]
		public CrossReference getTableTableCrossReference_4_0() { return cTableTableCrossReference_4_0; }
		
		//ID
		public RuleCall getTableTableIDTerminalRuleCall_4_0_1() { return cTableTableIDTerminalRuleCall_4_0_1; }
	}
	public class SelectStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.SelectStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTheKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTableKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTablesSelectTablesListParserRuleCall_3_0 = (RuleCall)cTablesAssignment_3.eContents().get(0);
		private final Keyword cShowKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cTheKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Keyword cColumnsKeyword_5_0_1 = (Keyword)cGroup_5_0.eContents().get(1);
		private final Assignment cColumnsAssignment_5_0_2 = (Assignment)cGroup_5_0.eContents().get(2);
		private final RuleCall cColumnsSelectColumnsListParserRuleCall_5_0_2_0 = (RuleCall)cColumnsAssignment_5_0_2.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cAllKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Keyword cColumnsKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWhereKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cConditionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_6_1_0 = (RuleCall)cConditionAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cGroupKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cThemKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cByKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cGroupAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cGroupSelectColumnsListParserRuleCall_7_3_0 = (RuleCall)cGroupAssignment_7_3.eContents().get(0);
		
		//// Define the SelectStatement rule
		//SelectStatement:
		//    'From' 'the' 'table' tables = SelectTablesList
		//    'show'
		//    ('the' 'columns:' columns = SelectColumnsList | 'all' 'columns')
		//    ('where' condition=Condition)?
		//    ('group' 'them' 'by' group = SelectColumnsList)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'From' 'the' 'table' tables = SelectTablesList
		//'show'
		//('the' 'columns:' columns = SelectColumnsList | 'all' 'columns')
		//('where' condition=Condition)?
		//('group' 'them' 'by' group = SelectColumnsList)?
		public Group getGroup() { return cGroup; }
		
		//'From'
		public Keyword getFromKeyword_0() { return cFromKeyword_0; }
		
		//'the'
		public Keyword getTheKeyword_1() { return cTheKeyword_1; }
		
		//'table'
		public Keyword getTableKeyword_2() { return cTableKeyword_2; }
		
		//tables = SelectTablesList
		public Assignment getTablesAssignment_3() { return cTablesAssignment_3; }
		
		//SelectTablesList
		public RuleCall getTablesSelectTablesListParserRuleCall_3_0() { return cTablesSelectTablesListParserRuleCall_3_0; }
		
		//'show'
		public Keyword getShowKeyword_4() { return cShowKeyword_4; }
		
		//('the' 'columns:' columns = SelectColumnsList | 'all' 'columns')
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'the' 'columns:' columns = SelectColumnsList
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'the'
		public Keyword getTheKeyword_5_0_0() { return cTheKeyword_5_0_0; }
		
		//'columns:'
		public Keyword getColumnsKeyword_5_0_1() { return cColumnsKeyword_5_0_1; }
		
		//columns = SelectColumnsList
		public Assignment getColumnsAssignment_5_0_2() { return cColumnsAssignment_5_0_2; }
		
		//SelectColumnsList
		public RuleCall getColumnsSelectColumnsListParserRuleCall_5_0_2_0() { return cColumnsSelectColumnsListParserRuleCall_5_0_2_0; }
		
		//'all' 'columns'
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//'all'
		public Keyword getAllKeyword_5_1_0() { return cAllKeyword_5_1_0; }
		
		//'columns'
		public Keyword getColumnsKeyword_5_1_1() { return cColumnsKeyword_5_1_1; }
		
		//('where' condition=Condition)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'where'
		public Keyword getWhereKeyword_6_0() { return cWhereKeyword_6_0; }
		
		//condition=Condition
		public Assignment getConditionAssignment_6_1() { return cConditionAssignment_6_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_6_1_0() { return cConditionConditionParserRuleCall_6_1_0; }
		
		//('group' 'them' 'by' group = SelectColumnsList)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'group'
		public Keyword getGroupKeyword_7_0() { return cGroupKeyword_7_0; }
		
		//'them'
		public Keyword getThemKeyword_7_1() { return cThemKeyword_7_1; }
		
		//'by'
		public Keyword getByKeyword_7_2() { return cByKeyword_7_2; }
		
		//group = SelectColumnsList
		public Assignment getGroupAssignment_7_3() { return cGroupAssignment_7_3; }
		
		//SelectColumnsList
		public RuleCall getGroupSelectColumnsListParserRuleCall_7_3_0() { return cGroupSelectColumnsListParserRuleCall_7_3_0; }
	}
	public class InsertStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.InsertStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInsertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIntoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTableKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTableSelectTableParserRuleCall_4_0 = (RuleCall)cTableAssignment_4.eContents().get(0);
		private final Keyword cForKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cTheKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColumnsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cColumnsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cColumnsSelectColumnsListParserRuleCall_8_0 = (RuleCall)cColumnsAssignment_8.eContents().get(0);
		private final Keyword cInsertKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cTheKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cValuesKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cLeftParenthesisKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cValuesAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cValuesInserValuesParserRuleCall_13_0 = (RuleCall)cValuesAssignment_13.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//// Define the InsertStatement rule
		//InsertStatement:
		//     'Insert' 'into' 'the' 'table' table = SelectTable
		//    'for' 'the' 'columns' columns = SelectColumnsList
		//    'insert' 'the' 'values' '(' values = InserValues ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		// 'Insert' 'into' 'the' 'table' table = SelectTable
		//'for' 'the' 'columns' columns = SelectColumnsList
		//'insert' 'the' 'values' '(' values = InserValues ')'
		public Group getGroup() { return cGroup; }
		
		//'Insert'
		public Keyword getInsertKeyword_0() { return cInsertKeyword_0; }
		
		//'into'
		public Keyword getIntoKeyword_1() { return cIntoKeyword_1; }
		
		//'the'
		public Keyword getTheKeyword_2() { return cTheKeyword_2; }
		
		//'table'
		public Keyword getTableKeyword_3() { return cTableKeyword_3; }
		
		//table = SelectTable
		public Assignment getTableAssignment_4() { return cTableAssignment_4; }
		
		//SelectTable
		public RuleCall getTableSelectTableParserRuleCall_4_0() { return cTableSelectTableParserRuleCall_4_0; }
		
		//'for'
		public Keyword getForKeyword_5() { return cForKeyword_5; }
		
		//'the'
		public Keyword getTheKeyword_6() { return cTheKeyword_6; }
		
		//'columns'
		public Keyword getColumnsKeyword_7() { return cColumnsKeyword_7; }
		
		//columns = SelectColumnsList
		public Assignment getColumnsAssignment_8() { return cColumnsAssignment_8; }
		
		//SelectColumnsList
		public RuleCall getColumnsSelectColumnsListParserRuleCall_8_0() { return cColumnsSelectColumnsListParserRuleCall_8_0; }
		
		//'insert'
		public Keyword getInsertKeyword_9() { return cInsertKeyword_9; }
		
		//'the'
		public Keyword getTheKeyword_10() { return cTheKeyword_10; }
		
		//'values'
		public Keyword getValuesKeyword_11() { return cValuesKeyword_11; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_12() { return cLeftParenthesisKeyword_12; }
		
		//values = InserValues
		public Assignment getValuesAssignment_13() { return cValuesAssignment_13; }
		
		//InserValues
		public RuleCall getValuesInserValuesParserRuleCall_13_0() { return cValuesInserValuesParserRuleCall_13_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_14() { return cRightParenthesisKeyword_14; }
	}
	public class UpdateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.UpdateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUpdateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTheKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTableKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTableSelectTableParserRuleCall_3_0 = (RuleCall)cTableAssignment_3.eContents().get(0);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSetKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cUpdatesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cUpdatesSelectUpdateListParserRuleCall_6_0 = (RuleCall)cUpdatesAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cWhereKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cConditionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_7_1_0 = (RuleCall)cConditionAssignment_7_1.eContents().get(0);
		
		//// Define the UpdateStatement rule
		//UpdateStatement:
		//    'Update' 'the' 'table' table = SelectTable
		//    'to''set' updates = SelectUpdateList
		//    ('where' condition=Condition)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Update' 'the' 'table' table = SelectTable
		//'to''set' updates = SelectUpdateList
		//('where' condition=Condition)?
		public Group getGroup() { return cGroup; }
		
		//'Update'
		public Keyword getUpdateKeyword_0() { return cUpdateKeyword_0; }
		
		//'the'
		public Keyword getTheKeyword_1() { return cTheKeyword_1; }
		
		//'table'
		public Keyword getTableKeyword_2() { return cTableKeyword_2; }
		
		//table = SelectTable
		public Assignment getTableAssignment_3() { return cTableAssignment_3; }
		
		//SelectTable
		public RuleCall getTableSelectTableParserRuleCall_3_0() { return cTableSelectTableParserRuleCall_3_0; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//'set'
		public Keyword getSetKeyword_5() { return cSetKeyword_5; }
		
		//updates = SelectUpdateList
		public Assignment getUpdatesAssignment_6() { return cUpdatesAssignment_6; }
		
		//SelectUpdateList
		public RuleCall getUpdatesSelectUpdateListParserRuleCall_6_0() { return cUpdatesSelectUpdateListParserRuleCall_6_0; }
		
		//('where' condition=Condition)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'where'
		public Keyword getWhereKeyword_7_0() { return cWhereKeyword_7_0; }
		
		//condition=Condition
		public Assignment getConditionAssignment_7_1() { return cConditionAssignment_7_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_7_1_0() { return cConditionConditionParserRuleCall_7_1_0; }
	}
	public class DeleteStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.DeleteStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cDeleteKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cTheKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cTableKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cTablesAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cTablesSelectTablesListParserRuleCall_0_3_0 = (RuleCall)cTablesAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cEmptyKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cTheKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cTableKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cSelectTableParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cDeleteKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cRecordsKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cFromKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cTheKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cTableKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final RuleCall cSelectTableParserRuleCall_2_5 = (RuleCall)cGroup_2.eContents().get(5);
		private final Keyword cWhereKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		private final Assignment cConditionAssignment_2_7 = (Assignment)cGroup_2.eContents().get(7);
		private final RuleCall cConditionConditionParserRuleCall_2_7_0 = (RuleCall)cConditionAssignment_2_7.eContents().get(0);
		
		//// Define the DeleteStatement rule
		//DeleteStatement:
		//    ('Delete' 'the' 'table' tables = SelectTablesList) |
		//    ('Empty' 'the' 'table' SelectTable) |
		//    ('Delete' 'records' 'from' 'the' 'table' SelectTable
		//    'where' condition=Condition)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('Delete' 'the' 'table' tables = SelectTablesList) |
		//('Empty' 'the' 'table' SelectTable) |
		//('Delete' 'records' 'from' 'the' 'table' SelectTable
		//'where' condition=Condition)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('Delete' 'the' 'table' tables = SelectTablesList)
		public Group getGroup_0() { return cGroup_0; }
		
		//'Delete'
		public Keyword getDeleteKeyword_0_0() { return cDeleteKeyword_0_0; }
		
		//'the'
		public Keyword getTheKeyword_0_1() { return cTheKeyword_0_1; }
		
		//'table'
		public Keyword getTableKeyword_0_2() { return cTableKeyword_0_2; }
		
		//tables = SelectTablesList
		public Assignment getTablesAssignment_0_3() { return cTablesAssignment_0_3; }
		
		//SelectTablesList
		public RuleCall getTablesSelectTablesListParserRuleCall_0_3_0() { return cTablesSelectTablesListParserRuleCall_0_3_0; }
		
		//('Empty' 'the' 'table' SelectTable)
		public Group getGroup_1() { return cGroup_1; }
		
		//'Empty'
		public Keyword getEmptyKeyword_1_0() { return cEmptyKeyword_1_0; }
		
		//'the'
		public Keyword getTheKeyword_1_1() { return cTheKeyword_1_1; }
		
		//'table'
		public Keyword getTableKeyword_1_2() { return cTableKeyword_1_2; }
		
		//SelectTable
		public RuleCall getSelectTableParserRuleCall_1_3() { return cSelectTableParserRuleCall_1_3; }
		
		//('Delete' 'records' 'from' 'the' 'table' SelectTable
		//'where' condition=Condition)
		public Group getGroup_2() { return cGroup_2; }
		
		//'Delete'
		public Keyword getDeleteKeyword_2_0() { return cDeleteKeyword_2_0; }
		
		//'records'
		public Keyword getRecordsKeyword_2_1() { return cRecordsKeyword_2_1; }
		
		//'from'
		public Keyword getFromKeyword_2_2() { return cFromKeyword_2_2; }
		
		//'the'
		public Keyword getTheKeyword_2_3() { return cTheKeyword_2_3; }
		
		//'table'
		public Keyword getTableKeyword_2_4() { return cTableKeyword_2_4; }
		
		//SelectTable
		public RuleCall getSelectTableParserRuleCall_2_5() { return cSelectTableParserRuleCall_2_5; }
		
		//'where'
		public Keyword getWhereKeyword_2_6() { return cWhereKeyword_2_6; }
		
		//condition=Condition
		public Assignment getConditionAssignment_2_7() { return cConditionAssignment_2_7; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_7_0() { return cConditionConditionParserRuleCall_2_7_0; }
	}
	public class SelectUpdateListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.SelectUpdateList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUpdateItemAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUpdateItemUpdateItemParserRuleCall_0_0 = (RuleCall)cUpdateItemAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cUpdateItemAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUpdateItemUpdateItemParserRuleCall_1_1_0 = (RuleCall)cUpdateItemAssignment_1_1.eContents().get(0);
		
		//SelectUpdateList:
		//    updateItem+=UpdateItem (',' updateItem+=UpdateItem)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//updateItem+=UpdateItem (',' updateItem+=UpdateItem)*
		public Group getGroup() { return cGroup; }
		
		//updateItem+=UpdateItem
		public Assignment getUpdateItemAssignment_0() { return cUpdateItemAssignment_0; }
		
		//UpdateItem
		public RuleCall getUpdateItemUpdateItemParserRuleCall_0_0() { return cUpdateItemUpdateItemParserRuleCall_0_0; }
		
		//(',' updateItem+=UpdateItem)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//updateItem+=UpdateItem
		public Assignment getUpdateItemAssignment_1_1() { return cUpdateItemAssignment_1_1; }
		
		//UpdateItem
		public RuleCall getUpdateItemUpdateItemParserRuleCall_1_1_0() { return cUpdateItemUpdateItemParserRuleCall_1_1_0; }
	}
	public class UpdateItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.UpdateItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColumnAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColumnColumnReferenceParserRuleCall_0_0 = (RuleCall)cColumnAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//// Define the UpdateItem rule
		//UpdateItem:
		//    (column=ColumnReference '=' value=Value)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(column=ColumnReference '=' value=Value)
		public Group getGroup() { return cGroup; }
		
		//column=ColumnReference
		public Assignment getColumnAssignment_0() { return cColumnAssignment_0; }
		
		//ColumnReference
		public RuleCall getColumnColumnReferenceParserRuleCall_0_0() { return cColumnColumnReferenceParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}
	public class InserValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.InserValues");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueListValueParserRuleCall_0_0 = (RuleCall)cValueListAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueListValueParserRuleCall_1_1_0 = (RuleCall)cValueListAssignment_1_1.eContents().get(0);
		
		//InserValues:
		//    valueList+=Value (',' valueList+=Value)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//valueList+=Value (',' valueList+=Value)*
		public Group getGroup() { return cGroup; }
		
		//valueList+=Value
		public Assignment getValueListAssignment_0() { return cValueListAssignment_0; }
		
		//Value
		public RuleCall getValueListValueParserRuleCall_0_0() { return cValueListValueParserRuleCall_0_0; }
		
		//(',' valueList+=Value)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//valueList+=Value
		public Assignment getValueListAssignment_1_1() { return cValueListAssignment_1_1; }
		
		//Value
		public RuleCall getValueListValueParserRuleCall_1_1_0() { return cValueListValueParserRuleCall_1_1_0; }
	}
	public class SelectTablesListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.SelectTablesList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectTableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSelectTableTableCrossReference_0_0 = (CrossReference)cSelectTableAssignment_0.eContents().get(0);
		private final RuleCall cSelectTableTableIDTerminalRuleCall_0_0_1 = (RuleCall)cSelectTableTableCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSelectTableAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cSelectTableTableCrossReference_1_1_0 = (CrossReference)cSelectTableAssignment_1_1.eContents().get(0);
		private final RuleCall cSelectTableTableIDTerminalRuleCall_1_1_0_1 = (RuleCall)cSelectTableTableCrossReference_1_1_0.eContents().get(1);
		
		//SelectTablesList:
		//    selectTable+=[Table] (',' selectTable+=[Table])*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//selectTable+=[Table] (',' selectTable+=[Table])*
		public Group getGroup() { return cGroup; }
		
		//selectTable+=[Table]
		public Assignment getSelectTableAssignment_0() { return cSelectTableAssignment_0; }
		
		//[Table]
		public CrossReference getSelectTableTableCrossReference_0_0() { return cSelectTableTableCrossReference_0_0; }
		
		//ID
		public RuleCall getSelectTableTableIDTerminalRuleCall_0_0_1() { return cSelectTableTableIDTerminalRuleCall_0_0_1; }
		
		//(',' selectTable+=[Table])*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//selectTable+=[Table]
		public Assignment getSelectTableAssignment_1_1() { return cSelectTableAssignment_1_1; }
		
		//[Table]
		public CrossReference getSelectTableTableCrossReference_1_1_0() { return cSelectTableTableCrossReference_1_1_0; }
		
		//ID
		public RuleCall getSelectTableTableIDTerminalRuleCall_1_1_0_1() { return cSelectTableTableIDTerminalRuleCall_1_1_0_1; }
	}
	public class SelectTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.SelectTable");
		private final Assignment cTableAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTableTableCrossReference_0 = (CrossReference)cTableAssignment.eContents().get(0);
		private final RuleCall cTableTableIDTerminalRuleCall_0_1 = (RuleCall)cTableTableCrossReference_0.eContents().get(1);
		
		//SelectTable:
		//    table = [Table]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//table = [Table]
		public Assignment getTableAssignment() { return cTableAssignment; }
		
		//[Table]
		public CrossReference getTableTableCrossReference_0() { return cTableTableCrossReference_0; }
		
		//ID
		public RuleCall getTableTableIDTerminalRuleCall_0_1() { return cTableTableIDTerminalRuleCall_0_1; }
	}
	public class SelectColumnsListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.SelectColumnsList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectColumnAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectColumnColumnReferenceParserRuleCall_0_0 = (RuleCall)cSelectColumnAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSelectColumnAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSelectColumnColumnReferenceParserRuleCall_1_1_0 = (RuleCall)cSelectColumnAssignment_1_1.eContents().get(0);
		
		//// Define the SelectList rule
		//SelectColumnsList:
		//    selectColumn+=ColumnReference (',' selectColumn+=ColumnReference)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//selectColumn+=ColumnReference (',' selectColumn+=ColumnReference)*
		public Group getGroup() { return cGroup; }
		
		//selectColumn+=ColumnReference
		public Assignment getSelectColumnAssignment_0() { return cSelectColumnAssignment_0; }
		
		//ColumnReference
		public RuleCall getSelectColumnColumnReferenceParserRuleCall_0_0() { return cSelectColumnColumnReferenceParserRuleCall_0_0; }
		
		//(',' selectColumn+=ColumnReference)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//selectColumn+=ColumnReference
		public Assignment getSelectColumnAssignment_1_1() { return cSelectColumnAssignment_1_1; }
		
		//ColumnReference
		public RuleCall getSelectColumnColumnReferenceParserRuleCall_1_1_0() { return cSelectColumnColumnReferenceParserRuleCall_1_1_0; }
	}
	public class ColumnReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.ColumnReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColumnAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cColumnColumnCrossReference_0_0 = (CrossReference)cColumnAssignment_0.eContents().get(0);
		private final RuleCall cColumnColumnIDTerminalRuleCall_0_0_1 = (RuleCall)cColumnColumnCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cInKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTableAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTableTableCrossReference_1_1_0 = (CrossReference)cTableAssignment_1_1.eContents().get(0);
		private final RuleCall cTableTableIDTerminalRuleCall_1_1_0_1 = (RuleCall)cTableTableCrossReference_1_1_0.eContents().get(1);
		
		//ColumnReference:
		//    column=[Column] ('in' table=[Table])?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//column=[Column] ('in' table=[Table])?
		public Group getGroup() { return cGroup; }
		
		//column=[Column]
		public Assignment getColumnAssignment_0() { return cColumnAssignment_0; }
		
		//[Column]
		public CrossReference getColumnColumnCrossReference_0_0() { return cColumnColumnCrossReference_0_0; }
		
		//ID
		public RuleCall getColumnColumnIDTerminalRuleCall_0_0_1() { return cColumnColumnIDTerminalRuleCall_0_0_1; }
		
		//('in' table=[Table])?
		public Group getGroup_1() { return cGroup_1; }
		
		//'in'
		public Keyword getInKeyword_1_0() { return cInKeyword_1_0; }
		
		//table=[Table]
		public Assignment getTableAssignment_1_1() { return cTableAssignment_1_1; }
		
		//[Table]
		public CrossReference getTableTableCrossReference_1_1_0() { return cTableTableCrossReference_1_1_0; }
		
		//ID
		public RuleCall getTableTableIDTerminalRuleCall_1_1_0_1() { return cTableTableIDTerminalRuleCall_1_1_0_1; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cLogicOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLogicOperatorLogicOperatorEnumRuleCall_1_1_0 = (RuleCall)cLogicOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// Define the Condition rule
		//Condition returns LogicExpressions:
		//    Comparison ({Comparison.left = current} logicOperator=LogicOperator right += Comparison)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({Comparison.left = current} logicOperator=LogicOperator right += Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({Comparison.left = current} logicOperator=LogicOperator right += Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparison.left = current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }
		
		//logicOperator=LogicOperator
		public Assignment getLogicOperatorAssignment_1_1() { return cLogicOperatorAssignment_1_1; }
		
		//LogicOperator
		public RuleCall getLogicOperatorLogicOperatorEnumRuleCall_1_1_0() { return cLogicOperatorLogicOperatorEnumRuleCall_1_1_0; }
		
		//right += Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTheKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cAKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cLeftHandSideAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cLeftHandSideColumnCrossReference_1_0 = (CrossReference)cLeftHandSideAssignment_1.eContents().get(0);
		private final RuleCall cLeftHandSideColumnIDTerminalRuleCall_1_0_1 = (RuleCall)cLeftHandSideColumnCrossReference_1_0.eContents().get(1);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorComparisonOperatorParserRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cRightHandSideAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightHandSideValueParserRuleCall_3_0 = (RuleCall)cRightHandSideAssignment_3.eContents().get(0);
		
		//// Define the Comparison rule
		//Comparison returns LogicExpressions:
		//    ('the' | 'a')? leftHandSide=[Column] operator=ComparisonOperator rightHandSide=Value
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('the' | 'a')? leftHandSide=[Column] operator=ComparisonOperator rightHandSide=Value
		public Group getGroup() { return cGroup; }
		
		//('the' | 'a')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'the'
		public Keyword getTheKeyword_0_0() { return cTheKeyword_0_0; }
		
		//'a'
		public Keyword getAKeyword_0_1() { return cAKeyword_0_1; }
		
		//leftHandSide=[Column]
		public Assignment getLeftHandSideAssignment_1() { return cLeftHandSideAssignment_1; }
		
		//[Column]
		public CrossReference getLeftHandSideColumnCrossReference_1_0() { return cLeftHandSideColumnCrossReference_1_0; }
		
		//ID
		public RuleCall getLeftHandSideColumnIDTerminalRuleCall_1_0_1() { return cLeftHandSideColumnIDTerminalRuleCall_1_0_1; }
		
		//operator=ComparisonOperator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//ComparisonOperator
		public RuleCall getOperatorComparisonOperatorParserRuleCall_2_0() { return cOperatorComparisonOperatorParserRuleCall_2_0; }
		
		//rightHandSide=Value
		public Assignment getRightHandSideAssignment_3() { return cRightHandSideAssignment_3; }
		
		//Value
		public RuleCall getRightHandSideValueParserRuleCall_3_0() { return cRightHandSideValueParserRuleCall_3_0; }
	}
	public class ComparisonOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.ComparisonOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComparisonOperatorSignsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComparisonOperatorStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Define the ComparisonOperator rule
		//ComparisonOperator:
		//    ComparisonOperatorSigns | ComparisonOperatorString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ComparisonOperatorSigns | ComparisonOperatorString
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ComparisonOperatorSigns
		public RuleCall getComparisonOperatorSignsParserRuleCall_0() { return cComparisonOperatorSignsParserRuleCall_0; }
		
		//ComparisonOperatorString
		public RuleCall getComparisonOperatorStringParserRuleCall_1() { return cComparisonOperatorStringParserRuleCall_1; }
	}
	public class ComparisonOperatorStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.ComparisonOperatorString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cIsKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cEqualKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cToKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cIsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cNotKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cEqualKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cToKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLessKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cThanKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cGreaterKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cThanKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLessKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cThanKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cOrKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cEqualKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cToKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cGreaterKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cThanKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cOrKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cEqualKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cToKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		
		//ComparisonOperatorString:
		//    'is' 'equal' 'to'
		//    | 'is' 'not' 'equal' 'to'
		//    | 'less' 'than'
		//    | 'greater' 'than'
		//    | 'less' 'than' 'or' 'equal' 'to'
		//    | 'greater' 'than' 'or' 'equal' 'to'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'is' 'equal' 'to'
		//| 'is' 'not' 'equal' 'to'
		//| 'less' 'than'
		//| 'greater' 'than'
		//| 'less' 'than' 'or' 'equal' 'to'
		//| 'greater' 'than' 'or' 'equal' 'to'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'is' 'equal' 'to'
		public Group getGroup_0() { return cGroup_0; }
		
		//'is'
		public Keyword getIsKeyword_0_0() { return cIsKeyword_0_0; }
		
		//'equal'
		public Keyword getEqualKeyword_0_1() { return cEqualKeyword_0_1; }
		
		//'to'
		public Keyword getToKeyword_0_2() { return cToKeyword_0_2; }
		
		//'is' 'not' 'equal' 'to'
		public Group getGroup_1() { return cGroup_1; }
		
		//'is'
		public Keyword getIsKeyword_1_0() { return cIsKeyword_1_0; }
		
		//'not'
		public Keyword getNotKeyword_1_1() { return cNotKeyword_1_1; }
		
		//'equal'
		public Keyword getEqualKeyword_1_2() { return cEqualKeyword_1_2; }
		
		//'to'
		public Keyword getToKeyword_1_3() { return cToKeyword_1_3; }
		
		//'less' 'than'
		public Group getGroup_2() { return cGroup_2; }
		
		//'less'
		public Keyword getLessKeyword_2_0() { return cLessKeyword_2_0; }
		
		//'than'
		public Keyword getThanKeyword_2_1() { return cThanKeyword_2_1; }
		
		//'greater' 'than'
		public Group getGroup_3() { return cGroup_3; }
		
		//'greater'
		public Keyword getGreaterKeyword_3_0() { return cGreaterKeyword_3_0; }
		
		//'than'
		public Keyword getThanKeyword_3_1() { return cThanKeyword_3_1; }
		
		//'less' 'than' 'or' 'equal' 'to'
		public Group getGroup_4() { return cGroup_4; }
		
		//'less'
		public Keyword getLessKeyword_4_0() { return cLessKeyword_4_0; }
		
		//'than'
		public Keyword getThanKeyword_4_1() { return cThanKeyword_4_1; }
		
		//'or'
		public Keyword getOrKeyword_4_2() { return cOrKeyword_4_2; }
		
		//'equal'
		public Keyword getEqualKeyword_4_3() { return cEqualKeyword_4_3; }
		
		//'to'
		public Keyword getToKeyword_4_4() { return cToKeyword_4_4; }
		
		//'greater' 'than' 'or' 'equal' 'to'
		public Group getGroup_5() { return cGroup_5; }
		
		//'greater'
		public Keyword getGreaterKeyword_5_0() { return cGreaterKeyword_5_0; }
		
		//'than'
		public Keyword getThanKeyword_5_1() { return cThanKeyword_5_1; }
		
		//'or'
		public Keyword getOrKeyword_5_2() { return cOrKeyword_5_2; }
		
		//'equal'
		public Keyword getEqualKeyword_5_3() { return cEqualKeyword_5_3; }
		
		//'to'
		public Keyword getToKeyword_5_4() { return cToKeyword_5_4; }
	}
	public class ComparisonOperatorSignsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.ComparisonOperatorSigns");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLessThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//ComparisonOperatorSigns:
		//    '=' | '<=' | '>='| '>' | '<'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'=' | '<=' | '>='| '>' | '<'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//'<'
		public Keyword getLessThanSignKeyword_4() { return cLessThanSignKeyword_4; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Define the Value rule
		//Value:
		//    INT | STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	
	public class DatatypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.Datatype");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIntegerIntegerKeyword_0_0 = (Keyword)cIntegerEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cStringStringKeyword_1_0 = (Keyword)cStringEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDateEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDateDateKeyword_2_0 = (Keyword)cDateEnumLiteralDeclaration_2.eContents().get(0);
		
		//// Change datatype structure
		//enum Datatype:
		//  integer | string | date
		// ;
		public EnumRule getRule() { return rule; }
		
		//integer | string | date
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//integer
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_0() { return cIntegerEnumLiteralDeclaration_0; }
		
		public Keyword getIntegerIntegerKeyword_0_0() { return cIntegerIntegerKeyword_0_0; }
		
		//string
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_1() { return cStringEnumLiteralDeclaration_1; }
		
		public Keyword getStringStringKeyword_1_0() { return cStringStringKeyword_1_0; }
		
		//date
		public EnumLiteralDeclaration getDateEnumLiteralDeclaration_2() { return cDateEnumLiteralDeclaration_2; }
		
		public Keyword getDateDateKeyword_2_0() { return cDateDateKeyword_2_0; }
	}
	public class LogicOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.NlToSql.LogicOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAndAndKeyword_0_0 = (Keyword)cAndEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOrOrKeyword_1_0 = (Keyword)cOrEnumLiteralDeclaration_1.eContents().get(0);
		
		//// Define the LogicOperator rule
		//enum LogicOperator:
		//    and | or
		//;
		public EnumRule getRule() { return rule; }
		
		//and | or
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//and
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_0() { return cAndEnumLiteralDeclaration_0; }
		
		public Keyword getAndAndKeyword_0_0() { return cAndAndKeyword_0_0; }
		
		//or
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_1() { return cOrEnumLiteralDeclaration_1; }
		
		public Keyword getOrOrKeyword_1_0() { return cOrOrKeyword_1_0; }
	}
	
	private final AccountingSpeechElements pAccountingSpeech;
	private final StatementElements pStatement;
	private final CreateTableStatementElements pCreateTableStatement;
	private final ColumnListElements pColumnList;
	private final TableElements pTable;
	private final ColumnElements pColumn;
	private final DatatypeElements eDatatype;
	private final SelectStatementElements pSelectStatement;
	private final InsertStatementElements pInsertStatement;
	private final UpdateStatementElements pUpdateStatement;
	private final DeleteStatementElements pDeleteStatement;
	private final SelectUpdateListElements pSelectUpdateList;
	private final UpdateItemElements pUpdateItem;
	private final InserValuesElements pInserValues;
	private final SelectTablesListElements pSelectTablesList;
	private final SelectTableElements pSelectTable;
	private final SelectColumnsListElements pSelectColumnsList;
	private final ColumnReferenceElements pColumnReference;
	private final ConditionElements pCondition;
	private final LogicOperatorElements eLogicOperator;
	private final ComparisonElements pComparison;
	private final ComparisonOperatorElements pComparisonOperator;
	private final ComparisonOperatorStringElements pComparisonOperatorString;
	private final ComparisonOperatorSignsElements pComparisonOperatorSigns;
	private final ValueElements pValue;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public NlToSqlGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAccountingSpeech = new AccountingSpeechElements();
		this.pStatement = new StatementElements();
		this.pCreateTableStatement = new CreateTableStatementElements();
		this.pColumnList = new ColumnListElements();
		this.pTable = new TableElements();
		this.pColumn = new ColumnElements();
		this.eDatatype = new DatatypeElements();
		this.pSelectStatement = new SelectStatementElements();
		this.pInsertStatement = new InsertStatementElements();
		this.pUpdateStatement = new UpdateStatementElements();
		this.pDeleteStatement = new DeleteStatementElements();
		this.pSelectUpdateList = new SelectUpdateListElements();
		this.pUpdateItem = new UpdateItemElements();
		this.pInserValues = new InserValuesElements();
		this.pSelectTablesList = new SelectTablesListElements();
		this.pSelectTable = new SelectTableElements();
		this.pSelectColumnsList = new SelectColumnsListElements();
		this.pColumnReference = new ColumnReferenceElements();
		this.pCondition = new ConditionElements();
		this.eLogicOperator = new LogicOperatorElements();
		this.pComparison = new ComparisonElements();
		this.pComparisonOperator = new ComparisonOperatorElements();
		this.pComparisonOperatorString = new ComparisonOperatorStringElements();
		this.pComparisonOperatorSigns = new ComparisonOperatorSignsElements();
		this.pValue = new ValueElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.NlToSql".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Define the root rule
	//AccountingSpeech:
	//    statements += Statement*
	//;
	public AccountingSpeechElements getAccountingSpeechAccess() {
		return pAccountingSpeech;
	}
	
	public ParserRule getAccountingSpeechRule() {
		return getAccountingSpeechAccess().getRule();
	}
	
	//// Define the Statement rule
	//Statement:
	//    (CreateTableStatement | SelectStatement | InsertStatement | UpdateStatement | DeleteStatement)'.'
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//// Define the table creation rule
	//CreateTableStatement:
	//  'Create' 'table' 'called' table=Table
	//  ('with' 'columns' columns=ColumnList)?
	// ;
	public CreateTableStatementElements getCreateTableStatementAccess() {
		return pCreateTableStatement;
	}
	
	public ParserRule getCreateTableStatementRule() {
		return getCreateTableStatementAccess().getRule();
	}
	
	//// Define the ColumnList rule
	//ColumnList:
	//    columnItem+=Column (',' columnItem+=Column)*
	//;
	public ColumnListElements getColumnListAccess() {
		return pColumnList;
	}
	
	public ParserRule getColumnListRule() {
		return getColumnListAccess().getRule();
	}
	
	//Table:
	//    name=ID
	//;
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//Column:
	//  name=ID 'of' 'type' type=Datatype (table=[Table])?;
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}
	
	//// Change datatype structure
	//enum Datatype:
	//  integer | string | date
	// ;
	public DatatypeElements getDatatypeAccess() {
		return eDatatype;
	}
	
	public EnumRule getDatatypeRule() {
		return getDatatypeAccess().getRule();
	}
	
	//// Define the SelectStatement rule
	//SelectStatement:
	//    'From' 'the' 'table' tables = SelectTablesList
	//    'show'
	//    ('the' 'columns:' columns = SelectColumnsList | 'all' 'columns')
	//    ('where' condition=Condition)?
	//    ('group' 'them' 'by' group = SelectColumnsList)?
	//;
	public SelectStatementElements getSelectStatementAccess() {
		return pSelectStatement;
	}
	
	public ParserRule getSelectStatementRule() {
		return getSelectStatementAccess().getRule();
	}
	
	//// Define the InsertStatement rule
	//InsertStatement:
	//     'Insert' 'into' 'the' 'table' table = SelectTable
	//    'for' 'the' 'columns' columns = SelectColumnsList
	//    'insert' 'the' 'values' '(' values = InserValues ')'
	//;
	public InsertStatementElements getInsertStatementAccess() {
		return pInsertStatement;
	}
	
	public ParserRule getInsertStatementRule() {
		return getInsertStatementAccess().getRule();
	}
	
	//// Define the UpdateStatement rule
	//UpdateStatement:
	//    'Update' 'the' 'table' table = SelectTable
	//    'to''set' updates = SelectUpdateList
	//    ('where' condition=Condition)?
	//;
	public UpdateStatementElements getUpdateStatementAccess() {
		return pUpdateStatement;
	}
	
	public ParserRule getUpdateStatementRule() {
		return getUpdateStatementAccess().getRule();
	}
	
	//// Define the DeleteStatement rule
	//DeleteStatement:
	//    ('Delete' 'the' 'table' tables = SelectTablesList) |
	//    ('Empty' 'the' 'table' SelectTable) |
	//    ('Delete' 'records' 'from' 'the' 'table' SelectTable
	//    'where' condition=Condition)
	//;
	public DeleteStatementElements getDeleteStatementAccess() {
		return pDeleteStatement;
	}
	
	public ParserRule getDeleteStatementRule() {
		return getDeleteStatementAccess().getRule();
	}
	
	//SelectUpdateList:
	//    updateItem+=UpdateItem (',' updateItem+=UpdateItem)*
	//;
	public SelectUpdateListElements getSelectUpdateListAccess() {
		return pSelectUpdateList;
	}
	
	public ParserRule getSelectUpdateListRule() {
		return getSelectUpdateListAccess().getRule();
	}
	
	//// Define the UpdateItem rule
	//UpdateItem:
	//    (column=ColumnReference '=' value=Value)
	//;
	public UpdateItemElements getUpdateItemAccess() {
		return pUpdateItem;
	}
	
	public ParserRule getUpdateItemRule() {
		return getUpdateItemAccess().getRule();
	}
	
	//InserValues:
	//    valueList+=Value (',' valueList+=Value)*
	//;
	public InserValuesElements getInserValuesAccess() {
		return pInserValues;
	}
	
	public ParserRule getInserValuesRule() {
		return getInserValuesAccess().getRule();
	}
	
	//SelectTablesList:
	//    selectTable+=[Table] (',' selectTable+=[Table])*
	//;
	public SelectTablesListElements getSelectTablesListAccess() {
		return pSelectTablesList;
	}
	
	public ParserRule getSelectTablesListRule() {
		return getSelectTablesListAccess().getRule();
	}
	
	//SelectTable:
	//    table = [Table]
	//;
	public SelectTableElements getSelectTableAccess() {
		return pSelectTable;
	}
	
	public ParserRule getSelectTableRule() {
		return getSelectTableAccess().getRule();
	}
	
	//// Define the SelectList rule
	//SelectColumnsList:
	//    selectColumn+=ColumnReference (',' selectColumn+=ColumnReference)*
	//;
	public SelectColumnsListElements getSelectColumnsListAccess() {
		return pSelectColumnsList;
	}
	
	public ParserRule getSelectColumnsListRule() {
		return getSelectColumnsListAccess().getRule();
	}
	
	//ColumnReference:
	//    column=[Column] ('in' table=[Table])?
	//;
	public ColumnReferenceElements getColumnReferenceAccess() {
		return pColumnReference;
	}
	
	public ParserRule getColumnReferenceRule() {
		return getColumnReferenceAccess().getRule();
	}
	
	//// Define the Condition rule
	//Condition returns LogicExpressions:
	//    Comparison ({Comparison.left = current} logicOperator=LogicOperator right += Comparison)*
	//;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//// Define the LogicOperator rule
	//enum LogicOperator:
	//    and | or
	//;
	public LogicOperatorElements getLogicOperatorAccess() {
		return eLogicOperator;
	}
	
	public EnumRule getLogicOperatorRule() {
		return getLogicOperatorAccess().getRule();
	}
	
	//// Define the Comparison rule
	//Comparison returns LogicExpressions:
	//    ('the' | 'a')? leftHandSide=[Column] operator=ComparisonOperator rightHandSide=Value
	//;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//// Define the ComparisonOperator rule
	//ComparisonOperator:
	//    ComparisonOperatorSigns | ComparisonOperatorString
	//;
	public ComparisonOperatorElements getComparisonOperatorAccess() {
		return pComparisonOperator;
	}
	
	public ParserRule getComparisonOperatorRule() {
		return getComparisonOperatorAccess().getRule();
	}
	
	//ComparisonOperatorString:
	//    'is' 'equal' 'to'
	//    | 'is' 'not' 'equal' 'to'
	//    | 'less' 'than'
	//    | 'greater' 'than'
	//    | 'less' 'than' 'or' 'equal' 'to'
	//    | 'greater' 'than' 'or' 'equal' 'to'
	//;
	public ComparisonOperatorStringElements getComparisonOperatorStringAccess() {
		return pComparisonOperatorString;
	}
	
	public ParserRule getComparisonOperatorStringRule() {
		return getComparisonOperatorStringAccess().getRule();
	}
	
	//ComparisonOperatorSigns:
	//    '=' | '<=' | '>='| '>' | '<'
	//;
	public ComparisonOperatorSignsElements getComparisonOperatorSignsAccess() {
		return pComparisonOperatorSigns;
	}
	
	public ParserRule getComparisonOperatorSignsRule() {
		return getComparisonOperatorSignsAccess().getRule();
	}
	
	//// Define the Value rule
	//Value:
	//    INT | STRING
	//;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
