/**
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.nlToSql.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import uk.ac.kcl.inf.nlToSql.Column;
import uk.ac.kcl.inf.nlToSql.Comparison;
import uk.ac.kcl.inf.nlToSql.ComparisonOperatorString;
import uk.ac.kcl.inf.nlToSql.NlToSqlPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Comparison</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.nlToSql.impl.ComparisonImpl#getLeftHandSide <em>Left Hand Side</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.nlToSql.impl.ComparisonImpl#getOperator <em>Operator</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.nlToSql.impl.ComparisonImpl#getRightHandSide <em>Right Hand Side</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ComparisonImpl extends LogicExpressionsImpl implements Comparison
{
  /**
   * The cached value of the '{@link #getLeftHandSide() <em>Left Hand Side</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeftHandSide()
   * @generated
   * @ordered
   */
  protected Column leftHandSide;

  /**
   * The default value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected static final ComparisonOperatorString OPERATOR_EDEFAULT = ComparisonOperatorString.EQUAL_TO;

  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected ComparisonOperatorString operator = OPERATOR_EDEFAULT;

  /**
   * The default value of the '{@link #getRightHandSide() <em>Right Hand Side</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRightHandSide()
   * @generated
   * @ordered
   */
  protected static final String RIGHT_HAND_SIDE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRightHandSide() <em>Right Hand Side</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRightHandSide()
   * @generated
   * @ordered
   */
  protected String rightHandSide = RIGHT_HAND_SIDE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComparisonImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NlToSqlPackage.Literals.COMPARISON;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Column getLeftHandSide()
  {
    if (leftHandSide != null && leftHandSide.eIsProxy())
    {
      InternalEObject oldLeftHandSide = (InternalEObject)leftHandSide;
      leftHandSide = (Column)eResolveProxy(oldLeftHandSide);
      if (leftHandSide != oldLeftHandSide)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, NlToSqlPackage.COMPARISON__LEFT_HAND_SIDE, oldLeftHandSide, leftHandSide));
      }
    }
    return leftHandSide;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Column basicGetLeftHandSide()
  {
    return leftHandSide;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLeftHandSide(Column newLeftHandSide)
  {
    Column oldLeftHandSide = leftHandSide;
    leftHandSide = newLeftHandSide;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NlToSqlPackage.COMPARISON__LEFT_HAND_SIDE, oldLeftHandSide, leftHandSide));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComparisonOperatorString getOperator()
  {
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperator(ComparisonOperatorString newOperator)
  {
    ComparisonOperatorString oldOperator = operator;
    operator = newOperator == null ? OPERATOR_EDEFAULT : newOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NlToSqlPackage.COMPARISON__OPERATOR, oldOperator, operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getRightHandSide()
  {
    return rightHandSide;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRightHandSide(String newRightHandSide)
  {
    String oldRightHandSide = rightHandSide;
    rightHandSide = newRightHandSide;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NlToSqlPackage.COMPARISON__RIGHT_HAND_SIDE, oldRightHandSide, rightHandSide));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NlToSqlPackage.COMPARISON__LEFT_HAND_SIDE:
        if (resolve) return getLeftHandSide();
        return basicGetLeftHandSide();
      case NlToSqlPackage.COMPARISON__OPERATOR:
        return getOperator();
      case NlToSqlPackage.COMPARISON__RIGHT_HAND_SIDE:
        return getRightHandSide();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NlToSqlPackage.COMPARISON__LEFT_HAND_SIDE:
        setLeftHandSide((Column)newValue);
        return;
      case NlToSqlPackage.COMPARISON__OPERATOR:
        setOperator((ComparisonOperatorString)newValue);
        return;
      case NlToSqlPackage.COMPARISON__RIGHT_HAND_SIDE:
        setRightHandSide((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NlToSqlPackage.COMPARISON__LEFT_HAND_SIDE:
        setLeftHandSide((Column)null);
        return;
      case NlToSqlPackage.COMPARISON__OPERATOR:
        setOperator(OPERATOR_EDEFAULT);
        return;
      case NlToSqlPackage.COMPARISON__RIGHT_HAND_SIDE:
        setRightHandSide(RIGHT_HAND_SIDE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NlToSqlPackage.COMPARISON__LEFT_HAND_SIDE:
        return leftHandSide != null;
      case NlToSqlPackage.COMPARISON__OPERATOR:
        return operator != OPERATOR_EDEFAULT;
      case NlToSqlPackage.COMPARISON__RIGHT_HAND_SIDE:
        return RIGHT_HAND_SIDE_EDEFAULT == null ? rightHandSide != null : !RIGHT_HAND_SIDE_EDEFAULT.equals(rightHandSide);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (operator: ");
    result.append(operator);
    result.append(", rightHandSide: ");
    result.append(rightHandSide);
    result.append(')');
    return result.toString();
  }

} //ComparisonImpl
