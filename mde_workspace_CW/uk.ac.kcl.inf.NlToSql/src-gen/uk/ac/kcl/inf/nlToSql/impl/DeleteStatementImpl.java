/**
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.nlToSql.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import uk.ac.kcl.inf.nlToSql.DeleteStatement;
import uk.ac.kcl.inf.nlToSql.LogicExpressions;
import uk.ac.kcl.inf.nlToSql.NlToSqlPackage;
import uk.ac.kcl.inf.nlToSql.SelectTable;
import uk.ac.kcl.inf.nlToSql.SelectTablesList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Delete Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.nlToSql.impl.DeleteStatementImpl#getTableToDelete <em>Table To Delete</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.nlToSql.impl.DeleteStatementImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.nlToSql.impl.DeleteStatementImpl#getTables <em>Tables</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.nlToSql.impl.DeleteStatementImpl#getTableToEmpty <em>Table To Empty</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DeleteStatementImpl extends StatementImpl implements DeleteStatement
{
  /**
   * The cached value of the '{@link #getTableToDelete() <em>Table To Delete</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTableToDelete()
   * @generated
   * @ordered
   */
  protected SelectTable tableToDelete;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected LogicExpressions condition;

  /**
   * The cached value of the '{@link #getTables() <em>Tables</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTables()
   * @generated
   * @ordered
   */
  protected SelectTablesList tables;

  /**
   * The cached value of the '{@link #getTableToEmpty() <em>Table To Empty</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTableToEmpty()
   * @generated
   * @ordered
   */
  protected SelectTable tableToEmpty;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DeleteStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NlToSqlPackage.Literals.DELETE_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectTable getTableToDelete()
  {
    return tableToDelete;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTableToDelete(SelectTable newTableToDelete, NotificationChain msgs)
  {
    SelectTable oldTableToDelete = tableToDelete;
    tableToDelete = newTableToDelete;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NlToSqlPackage.DELETE_STATEMENT__TABLE_TO_DELETE, oldTableToDelete, newTableToDelete);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTableToDelete(SelectTable newTableToDelete)
  {
    if (newTableToDelete != tableToDelete)
    {
      NotificationChain msgs = null;
      if (tableToDelete != null)
        msgs = ((InternalEObject)tableToDelete).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NlToSqlPackage.DELETE_STATEMENT__TABLE_TO_DELETE, null, msgs);
      if (newTableToDelete != null)
        msgs = ((InternalEObject)newTableToDelete).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NlToSqlPackage.DELETE_STATEMENT__TABLE_TO_DELETE, null, msgs);
      msgs = basicSetTableToDelete(newTableToDelete, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NlToSqlPackage.DELETE_STATEMENT__TABLE_TO_DELETE, newTableToDelete, newTableToDelete));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicExpressions getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(LogicExpressions newCondition, NotificationChain msgs)
  {
    LogicExpressions oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NlToSqlPackage.DELETE_STATEMENT__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCondition(LogicExpressions newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NlToSqlPackage.DELETE_STATEMENT__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NlToSqlPackage.DELETE_STATEMENT__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NlToSqlPackage.DELETE_STATEMENT__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectTablesList getTables()
  {
    return tables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTables(SelectTablesList newTables, NotificationChain msgs)
  {
    SelectTablesList oldTables = tables;
    tables = newTables;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NlToSqlPackage.DELETE_STATEMENT__TABLES, oldTables, newTables);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTables(SelectTablesList newTables)
  {
    if (newTables != tables)
    {
      NotificationChain msgs = null;
      if (tables != null)
        msgs = ((InternalEObject)tables).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NlToSqlPackage.DELETE_STATEMENT__TABLES, null, msgs);
      if (newTables != null)
        msgs = ((InternalEObject)newTables).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NlToSqlPackage.DELETE_STATEMENT__TABLES, null, msgs);
      msgs = basicSetTables(newTables, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NlToSqlPackage.DELETE_STATEMENT__TABLES, newTables, newTables));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectTable getTableToEmpty()
  {
    return tableToEmpty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTableToEmpty(SelectTable newTableToEmpty, NotificationChain msgs)
  {
    SelectTable oldTableToEmpty = tableToEmpty;
    tableToEmpty = newTableToEmpty;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NlToSqlPackage.DELETE_STATEMENT__TABLE_TO_EMPTY, oldTableToEmpty, newTableToEmpty);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTableToEmpty(SelectTable newTableToEmpty)
  {
    if (newTableToEmpty != tableToEmpty)
    {
      NotificationChain msgs = null;
      if (tableToEmpty != null)
        msgs = ((InternalEObject)tableToEmpty).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NlToSqlPackage.DELETE_STATEMENT__TABLE_TO_EMPTY, null, msgs);
      if (newTableToEmpty != null)
        msgs = ((InternalEObject)newTableToEmpty).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NlToSqlPackage.DELETE_STATEMENT__TABLE_TO_EMPTY, null, msgs);
      msgs = basicSetTableToEmpty(newTableToEmpty, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NlToSqlPackage.DELETE_STATEMENT__TABLE_TO_EMPTY, newTableToEmpty, newTableToEmpty));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case NlToSqlPackage.DELETE_STATEMENT__TABLE_TO_DELETE:
        return basicSetTableToDelete(null, msgs);
      case NlToSqlPackage.DELETE_STATEMENT__CONDITION:
        return basicSetCondition(null, msgs);
      case NlToSqlPackage.DELETE_STATEMENT__TABLES:
        return basicSetTables(null, msgs);
      case NlToSqlPackage.DELETE_STATEMENT__TABLE_TO_EMPTY:
        return basicSetTableToEmpty(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NlToSqlPackage.DELETE_STATEMENT__TABLE_TO_DELETE:
        return getTableToDelete();
      case NlToSqlPackage.DELETE_STATEMENT__CONDITION:
        return getCondition();
      case NlToSqlPackage.DELETE_STATEMENT__TABLES:
        return getTables();
      case NlToSqlPackage.DELETE_STATEMENT__TABLE_TO_EMPTY:
        return getTableToEmpty();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NlToSqlPackage.DELETE_STATEMENT__TABLE_TO_DELETE:
        setTableToDelete((SelectTable)newValue);
        return;
      case NlToSqlPackage.DELETE_STATEMENT__CONDITION:
        setCondition((LogicExpressions)newValue);
        return;
      case NlToSqlPackage.DELETE_STATEMENT__TABLES:
        setTables((SelectTablesList)newValue);
        return;
      case NlToSqlPackage.DELETE_STATEMENT__TABLE_TO_EMPTY:
        setTableToEmpty((SelectTable)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NlToSqlPackage.DELETE_STATEMENT__TABLE_TO_DELETE:
        setTableToDelete((SelectTable)null);
        return;
      case NlToSqlPackage.DELETE_STATEMENT__CONDITION:
        setCondition((LogicExpressions)null);
        return;
      case NlToSqlPackage.DELETE_STATEMENT__TABLES:
        setTables((SelectTablesList)null);
        return;
      case NlToSqlPackage.DELETE_STATEMENT__TABLE_TO_EMPTY:
        setTableToEmpty((SelectTable)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NlToSqlPackage.DELETE_STATEMENT__TABLE_TO_DELETE:
        return tableToDelete != null;
      case NlToSqlPackage.DELETE_STATEMENT__CONDITION:
        return condition != null;
      case NlToSqlPackage.DELETE_STATEMENT__TABLES:
        return tables != null;
      case NlToSqlPackage.DELETE_STATEMENT__TABLE_TO_EMPTY:
        return tableToEmpty != null;
    }
    return super.eIsSet(featureID);
  }

} //DeleteStatementImpl
