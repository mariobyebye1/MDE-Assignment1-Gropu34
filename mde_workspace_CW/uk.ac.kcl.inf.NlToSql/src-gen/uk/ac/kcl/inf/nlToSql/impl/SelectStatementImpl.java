/**
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.nlToSql.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uk.ac.kcl.inf.nlToSql.EntityName;
import uk.ac.kcl.inf.nlToSql.LogicExpressions;
import uk.ac.kcl.inf.nlToSql.NlToSqlPackage;
import uk.ac.kcl.inf.nlToSql.PropertyReference;
import uk.ac.kcl.inf.nlToSql.SelectStatement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Select Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.nlToSql.impl.SelectStatementImpl#getEntity <em>Entity</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.nlToSql.impl.SelectStatementImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.nlToSql.impl.SelectStatementImpl#getGroupByList <em>Group By List</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SelectStatementImpl extends StatementImpl implements SelectStatement
{
  /**
   * The cached value of the '{@link #getEntity() <em>Entity</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEntity()
   * @generated
   * @ordered
   */
  protected EntityName entity;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected LogicExpressions condition;

  /**
   * The cached value of the '{@link #getGroupByList() <em>Group By List</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGroupByList()
   * @generated
   * @ordered
   */
  protected EList<PropertyReference> groupByList;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SelectStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NlToSqlPackage.Literals.SELECT_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EntityName getEntity()
  {
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEntity(EntityName newEntity, NotificationChain msgs)
  {
    EntityName oldEntity = entity;
    entity = newEntity;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NlToSqlPackage.SELECT_STATEMENT__ENTITY, oldEntity, newEntity);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEntity(EntityName newEntity)
  {
    if (newEntity != entity)
    {
      NotificationChain msgs = null;
      if (entity != null)
        msgs = ((InternalEObject)entity).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NlToSqlPackage.SELECT_STATEMENT__ENTITY, null, msgs);
      if (newEntity != null)
        msgs = ((InternalEObject)newEntity).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NlToSqlPackage.SELECT_STATEMENT__ENTITY, null, msgs);
      msgs = basicSetEntity(newEntity, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NlToSqlPackage.SELECT_STATEMENT__ENTITY, newEntity, newEntity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicExpressions getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(LogicExpressions newCondition, NotificationChain msgs)
  {
    LogicExpressions oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NlToSqlPackage.SELECT_STATEMENT__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCondition(LogicExpressions newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NlToSqlPackage.SELECT_STATEMENT__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NlToSqlPackage.SELECT_STATEMENT__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NlToSqlPackage.SELECT_STATEMENT__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<PropertyReference> getGroupByList()
  {
    if (groupByList == null)
    {
      groupByList = new EObjectContainmentEList<PropertyReference>(PropertyReference.class, this, NlToSqlPackage.SELECT_STATEMENT__GROUP_BY_LIST);
    }
    return groupByList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case NlToSqlPackage.SELECT_STATEMENT__ENTITY:
        return basicSetEntity(null, msgs);
      case NlToSqlPackage.SELECT_STATEMENT__CONDITION:
        return basicSetCondition(null, msgs);
      case NlToSqlPackage.SELECT_STATEMENT__GROUP_BY_LIST:
        return ((InternalEList<?>)getGroupByList()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NlToSqlPackage.SELECT_STATEMENT__ENTITY:
        return getEntity();
      case NlToSqlPackage.SELECT_STATEMENT__CONDITION:
        return getCondition();
      case NlToSqlPackage.SELECT_STATEMENT__GROUP_BY_LIST:
        return getGroupByList();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NlToSqlPackage.SELECT_STATEMENT__ENTITY:
        setEntity((EntityName)newValue);
        return;
      case NlToSqlPackage.SELECT_STATEMENT__CONDITION:
        setCondition((LogicExpressions)newValue);
        return;
      case NlToSqlPackage.SELECT_STATEMENT__GROUP_BY_LIST:
        getGroupByList().clear();
        getGroupByList().addAll((Collection<? extends PropertyReference>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NlToSqlPackage.SELECT_STATEMENT__ENTITY:
        setEntity((EntityName)null);
        return;
      case NlToSqlPackage.SELECT_STATEMENT__CONDITION:
        setCondition((LogicExpressions)null);
        return;
      case NlToSqlPackage.SELECT_STATEMENT__GROUP_BY_LIST:
        getGroupByList().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NlToSqlPackage.SELECT_STATEMENT__ENTITY:
        return entity != null;
      case NlToSqlPackage.SELECT_STATEMENT__CONDITION:
        return condition != null;
      case NlToSqlPackage.SELECT_STATEMENT__GROUP_BY_LIST:
        return groupByList != null && !groupByList.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //SelectStatementImpl
