/**
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.nlToSql.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uk.ac.kcl.inf.nlToSql.InsertStatement;
import uk.ac.kcl.inf.nlToSql.NlToSqlPackage;
import uk.ac.kcl.inf.nlToSql.PropertyName;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Insert Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.nlToSql.impl.InsertStatementImpl#getPropertyList <em>Property List</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.nlToSql.impl.InsertStatementImpl#getValueList <em>Value List</em>}</li>
 * </ul>
 *
 * @generated
 */
public class InsertStatementImpl extends StatementImpl implements InsertStatement
{
  /**
   * The cached value of the '{@link #getPropertyList() <em>Property List</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPropertyList()
   * @generated
   * @ordered
   */
  protected EList<PropertyName> propertyList;

  /**
   * The cached value of the '{@link #getValueList() <em>Value List</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueList()
   * @generated
   * @ordered
   */
  protected EList<String> valueList;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InsertStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NlToSqlPackage.Literals.INSERT_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<PropertyName> getPropertyList()
  {
    if (propertyList == null)
    {
      propertyList = new EObjectContainmentEList<PropertyName>(PropertyName.class, this, NlToSqlPackage.INSERT_STATEMENT__PROPERTY_LIST);
    }
    return propertyList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getValueList()
  {
    if (valueList == null)
    {
      valueList = new EDataTypeEList<String>(String.class, this, NlToSqlPackage.INSERT_STATEMENT__VALUE_LIST);
    }
    return valueList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case NlToSqlPackage.INSERT_STATEMENT__PROPERTY_LIST:
        return ((InternalEList<?>)getPropertyList()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NlToSqlPackage.INSERT_STATEMENT__PROPERTY_LIST:
        return getPropertyList();
      case NlToSqlPackage.INSERT_STATEMENT__VALUE_LIST:
        return getValueList();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NlToSqlPackage.INSERT_STATEMENT__PROPERTY_LIST:
        getPropertyList().clear();
        getPropertyList().addAll((Collection<? extends PropertyName>)newValue);
        return;
      case NlToSqlPackage.INSERT_STATEMENT__VALUE_LIST:
        getValueList().clear();
        getValueList().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NlToSqlPackage.INSERT_STATEMENT__PROPERTY_LIST:
        getPropertyList().clear();
        return;
      case NlToSqlPackage.INSERT_STATEMENT__VALUE_LIST:
        getValueList().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NlToSqlPackage.INSERT_STATEMENT__PROPERTY_LIST:
        return propertyList != null && !propertyList.isEmpty();
      case NlToSqlPackage.INSERT_STATEMENT__VALUE_LIST:
        return valueList != null && !valueList.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (valueList: ");
    result.append(valueList);
    result.append(')');
    return result.toString();
  }

} //InsertStatementImpl
