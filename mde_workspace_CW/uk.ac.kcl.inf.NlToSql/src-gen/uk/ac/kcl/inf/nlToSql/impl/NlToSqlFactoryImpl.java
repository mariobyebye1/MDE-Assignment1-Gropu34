/**
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.nlToSql.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import uk.ac.kcl.inf.nlToSql.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class NlToSqlFactoryImpl extends EFactoryImpl implements NlToSqlFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static NlToSqlFactory init()
  {
    try
    {
      NlToSqlFactory theNlToSqlFactory = (NlToSqlFactory)EPackage.Registry.INSTANCE.getEFactory(NlToSqlPackage.eNS_URI);
      if (theNlToSqlFactory != null)
      {
        return theNlToSqlFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new NlToSqlFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NlToSqlFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case NlToSqlPackage.ACCOUNTING_SPEECH: return createAccountingSpeech();
      case NlToSqlPackage.STATEMENT: return createStatement();
      case NlToSqlPackage.SELECT_STATEMENT: return createSelectStatement();
      case NlToSqlPackage.INSERT_STATEMENT: return createInsertStatement();
      case NlToSqlPackage.UPDATE_STATEMENT: return createUpdateStatement();
      case NlToSqlPackage.DELETE_STATEMENT: return createDeleteStatement();
      case NlToSqlPackage.SELECT_LIST: return createSelectList();
      case NlToSqlPackage.PROPERTY_REFERENCE: return createPropertyReference();
      case NlToSqlPackage.ENTITY_NAME: return createEntityName();
      case NlToSqlPackage.PROPERTY_NAME: return createPropertyName();
      case NlToSqlPackage.UPDATE_ITEM: return createUpdateItem();
      case NlToSqlPackage.CONDITION: return createCondition();
      case NlToSqlPackage.COMPARISON: return createComparison();
      case NlToSqlPackage.ENTITY: return createEntity();
      case NlToSqlPackage.PROPERTY: return createProperty();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AccountingSpeech createAccountingSpeech()
  {
    AccountingSpeechImpl accountingSpeech = new AccountingSpeechImpl();
    return accountingSpeech;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectStatement createSelectStatement()
  {
    SelectStatementImpl selectStatement = new SelectStatementImpl();
    return selectStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InsertStatement createInsertStatement()
  {
    InsertStatementImpl insertStatement = new InsertStatementImpl();
    return insertStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UpdateStatement createUpdateStatement()
  {
    UpdateStatementImpl updateStatement = new UpdateStatementImpl();
    return updateStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeleteStatement createDeleteStatement()
  {
    DeleteStatementImpl deleteStatement = new DeleteStatementImpl();
    return deleteStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectList createSelectList()
  {
    SelectListImpl selectList = new SelectListImpl();
    return selectList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyReference createPropertyReference()
  {
    PropertyReferenceImpl propertyReference = new PropertyReferenceImpl();
    return propertyReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EntityName createEntityName()
  {
    EntityNameImpl entityName = new EntityNameImpl();
    return entityName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyName createPropertyName()
  {
    PropertyNameImpl propertyName = new PropertyNameImpl();
    return propertyName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UpdateItem createUpdateItem()
  {
    UpdateItemImpl updateItem = new UpdateItemImpl();
    return updateItem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition createCondition()
  {
    ConditionImpl condition = new ConditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Comparison createComparison()
  {
    ComparisonImpl comparison = new ComparisonImpl();
    return comparison;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity createEntity()
  {
    EntityImpl entity = new EntityImpl();
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Property createProperty()
  {
    PropertyImpl property = new PropertyImpl();
    return property;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NlToSqlPackage getNlToSqlPackage()
  {
    return (NlToSqlPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static NlToSqlPackage getPackage()
  {
    return NlToSqlPackage.eINSTANCE;
  }

} //NlToSqlFactoryImpl
