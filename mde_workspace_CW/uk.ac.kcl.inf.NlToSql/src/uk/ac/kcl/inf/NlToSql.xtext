grammar uk.ac.kcl.inf.NlToSql with org.eclipse.xtext.common.Terminals

generate nlToSql "http://www.ac.uk/kcl/inf/NlToSql"

// Define the root rule
AccountingSpeech:
    statements += Statement*
;

// Define the Statement rule
Statement:
    (CreateTableStatement | SelectStatement | InsertStatement | UpdateStatement | DeleteStatement)'.'
;

// Define the table creation rule
CreateTableStatement:
  'Create' 'table' 'called' table=Table
  ('with' 'columns' columns=ColumnList)?
 ;

// Define the ColumnList rule
ColumnList:
    columnItem+=Column (',' columnItem+=Column)*
;

Table:
	name=ID 
;

Column:
  name=ID 'of' 'type' type=Datatype;

// Change datatype structure
Datatype:
  'integer' | 'string' | 'date'
 ;


// Define the SelectStatement rule
SelectStatement:
	'From' 'the' 'table' SelectTablesList
    'show' 
    ('the' 'columns:' columns = SelectColumnsList | 'all' 'columns') 
    ('where' condition=Condition)? 
    ('group' 'by' group = SelectColumnsList)?
;

// Define the InsertStatement rule
InsertStatement:
 	'Insert' 'into' 'the' 'table' SelectTable
    'for' 'the' 'columns' columns = SelectColumnsList
    'insert' 'the' 'values' '(' values = InserValues ')'
;

// Define the UpdateStatement rule
UpdateStatement:
    'Update' 'the' 'table' SelectTable
    'to''set' updates = SelectUpdateList
    ('where' condition=Condition)?
;

// Define the DeleteStatement rule
DeleteStatement:
	('Delete' 'the' 'table' SelectTable) |
	('Empty' 'the' 'table' SelectTable) |
    ('Delete' 'records' 'from' 'the' 'table' SelectTable
    'where' condition=Condition)
;


SelectUpdateList:
	updateItem+=UpdateItem (',' updateItem+=UpdateItem)*
;

// Define the UpdateItem rule
UpdateItem:
    (column=ColumnReference '=' value=Value)
;


InserValues:
	valueList+=Value (',' valueList+=Value)* 
;

SelectTablesList:
	selectTable+=[Table] (',' selectTable+=[Table])*
;

SelectTable:
	table = [Table]
;

// Define the SelectList rule
SelectColumnsList:
    selectColumn+=ColumnReference (',' selectColumn+=ColumnReference)*
;

ColumnReference:
    column=[Column] ('in' table=[Table])?
;


// Define the Condition rule
Condition returns LogicExpressions:
	Comparison ({Comparison.left = current} LogicOperator right += Comparison)*
;

// Define the LogicOperator rule
LogicOperator:
    'and' | 'or'
;

// Define the Comparison rule
Comparison returns LogicExpressions:
    ('the' | 'a')? leftHandSide=[Column] operator=ComparisonOperator rightHandSide=Value
;


// Define the ComparisonOperator rule
ComparisonOperator:
    ComparisonOperatorSigns | ComparisonOperatorString
;


ComparisonOperatorString:
	'is' 'equal' 'to' 
	| 'is' 'not' 'equal' 'to' 
	| 'less' 'than' 
	| 'greater' 'than' 
	| 'less' 'than' 'or' 'equal' 'to' 
	| 'greater' 'than' 'or' 'equal' 'to'
;

ComparisonOperatorSigns:
	'=' | '<=' | '>='| '>' | '<'
;

// Define the Value rule
Value:
    INT | STRING
;
