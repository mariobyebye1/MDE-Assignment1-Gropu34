grammar uk.ac.kcl.inf.NlToSql with org.eclipse.xtext.common.Terminals

generate nlToSql "http://www.ac.uk/kcl/inf/NlToSql"

// Define the root rule
AccountingSpeech:
    statements += Statement*
;

// Define the Statement rule
Statement:
    (CreateTableStatement | SelectStatement | InsertStatement | UpdateStatement | DeleteStatement)'.'
;

// Define the table creation rule
CreateTableStatement:
  'Create' 'table' 'called' table=Table
  ('with' 'columns' columns=ColumnList)?
 ;

// Define the ColumnList rule
ColumnList:
    columnItem+=Column (',' columnItem+=Column)*
;

Table:
	name=ID 
;

Column:
  name=ID 'of' 'type' type=Datatype (table=[Table])?;

// Change datatype structure
enum Datatype:
  integer | string | date
 ;
 
// Define the SelectStatement rule
SelectStatement:
	'From' 'the' 'table' tables = SelectTablesList
    'show' 
    ('the' 'columns:' columns = SelectColumnsList | 'all' 'columns') 
    ('where' condition=Condition)? 
    ('group' 'them' 'by' group = SelectColumnsList)?
;

// Define the InsertStatement rule
InsertStatement:
 	'Insert' 'into' 'the' 'table' table = SelectTable
    'for' 'the' 'columns' columns = SelectColumnsList
    'insert' 'the' 'values' '(' values = InserValues ')'
;

// Define the UpdateStatement rule
UpdateStatement:
    'Update' 'the' 'table' table = SelectTable
    'to''set' updates = SelectUpdateList
    ('where' condition=Condition)?
;

// Define the DeleteStatement rule
DeleteStatement:
	(('Delete' 'records' 'from' 'the' 'table' tableToDelete = SelectTable
    'where' condition=Condition)|
	('Delete' 'the' 'tables' tables = SelectTablesList) |
	('Empty' 'the' 'table' tableToEmpty = SelectTable))
;


SelectUpdateList:
	updateItem+=UpdateItem (',' updateItem+=UpdateItem)*
;

// Define the UpdateItem rule
UpdateItem:
    (column=ColumnReference '=' value=Value)
;


InserValues:
	valueList+=Value (',' valueList+=Value)* 
;

SelectTablesList:
	selectTable+=[Table] (',' selectTable+=[Table])*
;

SelectTable:
	table = [Table]
;

// Define the SelectList rule
SelectColumnsList:
    selectColumn+=ColumnReference (',' selectColumn+=ColumnReference)*
;

ColumnReference:
    column=[Column] ('in' table=[Table])?
;


// Define the Condition rule
Condition returns LogicExpressions:
	Comparison ({Condition.left = current} logicOperator+=LogicOperator right += Comparison)*
;

// Define the LogicOperator rule
LogicOperator:
    "and" | "or"
;

// Define the Comparison rule
Comparison:
    ('the' | 'a')? leftHandSide=[Column] operator=ComparisonOperatorString rightHandSide=Value
;

enum ComparisonOperatorString:
	EQUAL_TO = "is equal to" 
	| NOT_EQUAL_TO = "is not equal to" 
	| LESS_THAN = "less than" 
	| GREATER_THAN = "greater than" 
	| LESS_THAN_OR_EQUAL_TO = "less than or equal to" 
	| GREATER_THEN_OR_EQUAL_TO = "greater than or equal to"
	| EQUAL_TO_SIGN = "=" 
	| NOT_EQUAL_TO_SIGN = "<>" 
	| LESS_THAN_SIGN = "<" 
	| GREATER_THAN_SIGN = ">" 
	| LESS_THAN_OR_EQUAL_TO_SIGN = "<=" 
	| GREATER_THEN_OR_EQUAL_TO_SIGN = ">="
;


// Define the Value rule
Value:
    INT | STRING
;
