grammar uk.ac.kcl.inf.NlToSql with org.eclipse.xtext.common.Terminals

generate nlToSql "http://www.ac.uk/kcl/inf/NlToSql"

// Define the root rule
AccountingSpeech:
    statements += Statement*
;

// Define the Statement rule
Statement:
    (CreateTableStatement | SelectStatement | InsertStatement | UpdateStatement)'.'
//    	   | DeleteStatement
    
;

// Define the table creation rule
CreateTableStatement:
  'Create' TheA 'table' 'called' table=Table
  ('with' 'columns' columns=ColumnList)?
 ;

// Define the ColumnList rule
ColumnList:
    columnItem+=Column (',' columnItem+=Column)*
;

Table:
	name=ID 
;

Column:
  name=ID 'of' 'type' type=Datatype;

Datatype:
  'integer' | 'string' | 'date'
 ;


// Define the SelectStatement rule
SelectStatement:
	'From' 'the' 'table' SelectTablesList
    'show' 
    ('the' 'columns:' columns = SelectColumnsList | 'all' 'columns') 
    ('where' condition=Condition)? 
    ('group' 'by' group = SelectColumnsList)?
;

// Define the InsertStatement rule
InsertStatement:
 	'Insert' 'into' TheTable SelectTable
    'for' 'the' 'columns' columns = SelectColumnsList
    'insert' 'the' 'values' '(' values = InserValues ')'
;

// Define the UpdateStatement rule
UpdateStatement:
    'Update' TheTable SelectTable
    'to''set' updates = SelectUpdateList
    ('where' condition=Condition)?
;

SelectUpdateList:
	updateItem+=UpdateItem (',' updateItem+=UpdateItem)*
;

// Define the UpdateItem rule
UpdateItem:
    (TheA column=ColumnReference '=' value=Value)
;


InserValues:
	valueList+=Value (',' valueList+=Value)* 
;

SelectTablesList:
	selectTable+=[Table] (',' selectTable+=[Table])*
;

SelectTable:
	table = [Table]
;

// Define the SelectList rule
SelectColumnsList:
    selectColumn+=ColumnReference (',' selectColumn+=ColumnReference)*
;

ColumnReference:
    column=[Column] ('in' table=[Table])?
;


// Define the Condition rule
Condition returns LogicExpressions:
	Comparison ({Comparison.left = current} LogicOperator right += Comparison)*
;

// Define the LogicOperator rule
LogicOperator:
    'and' | 'or'
;

// Define the Comparison rule
Comparison returns LogicExpressions:
    ('the' | 'a')? leftHandSide=[Column] operator=ComparisonOperator rightHandSide=Value
;


// Define the ComparisonOperator rule
ComparisonOperator:
    '=' | 'is' 'equal' 'to' | 'is' 'not' 'equal' 'to' | 'less' 'than' | 'greater' 'than' | 'less' 'than' 'or' 'equal' 'to' | 'greater' 'than' 'or' 'equal' 'to'
;


// Define the Value rule
Value:
    INT | STRING
;

TheTable:
	('the' 'table')?
;

TheA:
	('the' | 'a')?
;












//// Define the UpdateItem rule
//UpdateItem:
//    ('the' | 'a')? property=[Property] '=' value=Value
//;
//
//
//// Define the PropertyName rule
//PropertyName:
//    ('the' | 'a')? name=ID
//    
//;
//
//
//// Define the InsertStatement rule
//InsertStatement:
//    ('can' 'you')? 'insert' 'into' entity=EntityName 
//    'columns''(' propertyList+=PropertyName (',' propertyList+=PropertyName)* ')' 
//    'insert''values' '(' valueList+=Value (',' valueList+=Value)* ')'
//;

//// Define the UpdateStatement rule
//UpdateStatement:
//    ('can' 'you')? 'update' 'table' entity=EntityName 
//    'to''set' (updateItem+=UpdateItem (',' updateItem+=UpdateItem)*) 
//    ('where' condition=Condition)?
//;
//
//// Define the DeleteStatement rule
//DeleteStatement:
//    ('can' 'you' 'please')? 'delete' 'from' entity=EntityName 
//    ('where' condition=Condition)?
//;









//// Define the PropertyReference rule
//PropertyReference:
//    ('the' | 'a')? property=[Property]
//;
//
//// Define the EntityName rule
//EntityName:
//    ('the' | 'a')? name=ID
//;
//
//// Define the PropertyName rule
//PropertyName:
//    ('the' | 'a')? name=ID
//;
//
//// Define the Value rule
//Value:
//    INT | STRING
//;
//
//// Define the UpdateItem rule
//UpdateItem:
//    ('the' | 'a')? property=[Property] '=' value=Value
//;
//
//// Define the Condition rule
//Condition:
//    expression=Comparison (logicOperator=LogicOperator expression=Comparison)*
//;
//
//// Define the Comparison rule
//Comparison:
//    ('the' | 'a')? leftHandSide=[Property] operator=ComparisonOperator rightHandSide=Value
//;
//
//// Define the LogicOperator rule
//LogicOperator:
//    'and' | 'or'
//;
//
//// Define the ComparisonOperator rule
//ComparisonOperator:
//    '=' | 'is' 'equal' 'to' | 'is' 'not' 'equal' 'to' | 'less' 'than' | 'greater' 'than' | 'less' 'than' 'or' 'equal' 'to' | 'greater' 'than' 'or' 'equal' 'to'
//;
//
//// Define the Entity rule
//Entity:
//    ('the' | 'a')? name=ID
//;
//
//// Define the Property rule
//Property:
//    ('the' | 'a')? name=ID
//;

