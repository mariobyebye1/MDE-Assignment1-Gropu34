/*
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import uk.ac.kcl.inf.ide.contentassist.antlr.internal.InternalNlToSqlParser;
import uk.ac.kcl.inf.services.NlToSqlGrammarAccess;

public class NlToSqlParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(NlToSqlGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, NlToSqlGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementAccess().getAlternatives_0(), "rule__Statement__Alternatives_0");
			builder.put(grammarAccess.getSelectStatementAccess().getAlternatives_2_0(), "rule__SelectStatement__Alternatives_2_0");
			builder.put(grammarAccess.getSelectListAccess().getAlternatives_0(), "rule__SelectList__Alternatives_0");
			builder.put(grammarAccess.getPropertyReferenceAccess().getAlternatives_0(), "rule__PropertyReference__Alternatives_0");
			builder.put(grammarAccess.getEntityNameAccess().getAlternatives_0(), "rule__EntityName__Alternatives_0");
			builder.put(grammarAccess.getPropertyNameAccess().getAlternatives_0(), "rule__PropertyName__Alternatives_0");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getUpdateItemAccess().getAlternatives_0(), "rule__UpdateItem__Alternatives_0");
			builder.put(grammarAccess.getComparisonAccess().getAlternatives_0(), "rule__Comparison__Alternatives_0");
			builder.put(grammarAccess.getLogicOperatorAccess().getAlternatives(), "rule__LogicOperator__Alternatives");
			builder.put(grammarAccess.getComparisonOperatorAccess().getAlternatives(), "rule__ComparisonOperator__Alternatives");
			builder.put(grammarAccess.getEntityAccess().getAlternatives_0(), "rule__Entity__Alternatives_0");
			builder.put(grammarAccess.getPropertyAccess().getAlternatives_0(), "rule__Property__Alternatives_0");
			builder.put(grammarAccess.getStatementAccess().getGroup(), "rule__Statement__Group__0");
			builder.put(grammarAccess.getSelectStatementAccess().getGroup(), "rule__SelectStatement__Group__0");
			builder.put(grammarAccess.getSelectStatementAccess().getGroup_0(), "rule__SelectStatement__Group_0__0");
			builder.put(grammarAccess.getSelectStatementAccess().getGroup_2(), "rule__SelectStatement__Group_2__0");
			builder.put(grammarAccess.getSelectStatementAccess().getGroup_4(), "rule__SelectStatement__Group_4__0");
			builder.put(grammarAccess.getSelectStatementAccess().getGroup_5(), "rule__SelectStatement__Group_5__0");
			builder.put(grammarAccess.getSelectStatementAccess().getGroup_5_3(), "rule__SelectStatement__Group_5_3__0");
			builder.put(grammarAccess.getInsertStatementAccess().getGroup(), "rule__InsertStatement__Group__0");
			builder.put(grammarAccess.getInsertStatementAccess().getGroup_0(), "rule__InsertStatement__Group_0__0");
			builder.put(grammarAccess.getInsertStatementAccess().getGroup_6(), "rule__InsertStatement__Group_6__0");
			builder.put(grammarAccess.getInsertStatementAccess().getGroup_11(), "rule__InsertStatement__Group_11__0");
			builder.put(grammarAccess.getUpdateStatementAccess().getGroup(), "rule__UpdateStatement__Group__0");
			builder.put(grammarAccess.getUpdateStatementAccess().getGroup_0(), "rule__UpdateStatement__Group_0__0");
			builder.put(grammarAccess.getUpdateStatementAccess().getGroup_4(), "rule__UpdateStatement__Group_4__0");
			builder.put(grammarAccess.getUpdateStatementAccess().getGroup_4_1(), "rule__UpdateStatement__Group_4_1__0");
			builder.put(grammarAccess.getUpdateStatementAccess().getGroup_5(), "rule__UpdateStatement__Group_5__0");
			builder.put(grammarAccess.getDeleteStatementAccess().getGroup(), "rule__DeleteStatement__Group__0");
			builder.put(grammarAccess.getDeleteStatementAccess().getGroup_0(), "rule__DeleteStatement__Group_0__0");
			builder.put(grammarAccess.getDeleteStatementAccess().getGroup_4(), "rule__DeleteStatement__Group_4__0");
			builder.put(grammarAccess.getSelectListAccess().getGroup(), "rule__SelectList__Group__0");
			builder.put(grammarAccess.getSelectListAccess().getGroup_2(), "rule__SelectList__Group_2__0");
			builder.put(grammarAccess.getPropertyReferenceAccess().getGroup(), "rule__PropertyReference__Group__0");
			builder.put(grammarAccess.getEntityNameAccess().getGroup(), "rule__EntityName__Group__0");
			builder.put(grammarAccess.getPropertyNameAccess().getGroup(), "rule__PropertyName__Group__0");
			builder.put(grammarAccess.getUpdateItemAccess().getGroup(), "rule__UpdateItem__Group__0");
			builder.put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
			builder.put(grammarAccess.getConditionAccess().getGroup_1(), "rule__Condition__Group_1__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
			builder.put(grammarAccess.getComparisonOperatorAccess().getGroup_1(), "rule__ComparisonOperator__Group_1__0");
			builder.put(grammarAccess.getComparisonOperatorAccess().getGroup_2(), "rule__ComparisonOperator__Group_2__0");
			builder.put(grammarAccess.getComparisonOperatorAccess().getGroup_3(), "rule__ComparisonOperator__Group_3__0");
			builder.put(grammarAccess.getComparisonOperatorAccess().getGroup_4(), "rule__ComparisonOperator__Group_4__0");
			builder.put(grammarAccess.getComparisonOperatorAccess().getGroup_5(), "rule__ComparisonOperator__Group_5__0");
			builder.put(grammarAccess.getComparisonOperatorAccess().getGroup_6(), "rule__ComparisonOperator__Group_6__0");
			builder.put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
			builder.put(grammarAccess.getAccountingSpeechAccess().getStatementsAssignment(), "rule__AccountingSpeech__StatementsAssignment");
			builder.put(grammarAccess.getSelectStatementAccess().getEntityAssignment_3(), "rule__SelectStatement__EntityAssignment_3");
			builder.put(grammarAccess.getSelectStatementAccess().getConditionAssignment_4_1(), "rule__SelectStatement__ConditionAssignment_4_1");
			builder.put(grammarAccess.getSelectStatementAccess().getGroupByListAssignment_5_2(), "rule__SelectStatement__GroupByListAssignment_5_2");
			builder.put(grammarAccess.getSelectStatementAccess().getGroupByListAssignment_5_3_1(), "rule__SelectStatement__GroupByListAssignment_5_3_1");
			builder.put(grammarAccess.getInsertStatementAccess().getEntityAssignment_3(), "rule__InsertStatement__EntityAssignment_3");
			builder.put(grammarAccess.getInsertStatementAccess().getPropertyListAssignment_5(), "rule__InsertStatement__PropertyListAssignment_5");
			builder.put(grammarAccess.getInsertStatementAccess().getPropertyListAssignment_6_1(), "rule__InsertStatement__PropertyListAssignment_6_1");
			builder.put(grammarAccess.getInsertStatementAccess().getValueListAssignment_10(), "rule__InsertStatement__ValueListAssignment_10");
			builder.put(grammarAccess.getInsertStatementAccess().getValueListAssignment_11_1(), "rule__InsertStatement__ValueListAssignment_11_1");
			builder.put(grammarAccess.getUpdateStatementAccess().getEntityAssignment_2(), "rule__UpdateStatement__EntityAssignment_2");
			builder.put(grammarAccess.getUpdateStatementAccess().getUpdateItemAssignment_4_0(), "rule__UpdateStatement__UpdateItemAssignment_4_0");
			builder.put(grammarAccess.getUpdateStatementAccess().getUpdateItemAssignment_4_1_1(), "rule__UpdateStatement__UpdateItemAssignment_4_1_1");
			builder.put(grammarAccess.getUpdateStatementAccess().getConditionAssignment_5_1(), "rule__UpdateStatement__ConditionAssignment_5_1");
			builder.put(grammarAccess.getDeleteStatementAccess().getEntityAssignment_3(), "rule__DeleteStatement__EntityAssignment_3");
			builder.put(grammarAccess.getDeleteStatementAccess().getConditionAssignment_4_1(), "rule__DeleteStatement__ConditionAssignment_4_1");
			builder.put(grammarAccess.getSelectListAccess().getSelectItemAssignment_1(), "rule__SelectList__SelectItemAssignment_1");
			builder.put(grammarAccess.getSelectListAccess().getSelectItemAssignment_2_1(), "rule__SelectList__SelectItemAssignment_2_1");
			builder.put(grammarAccess.getPropertyReferenceAccess().getPropertyAssignment_1(), "rule__PropertyReference__PropertyAssignment_1");
			builder.put(grammarAccess.getEntityNameAccess().getNameAssignment_1(), "rule__EntityName__NameAssignment_1");
			builder.put(grammarAccess.getPropertyNameAccess().getNameAssignment_1(), "rule__PropertyName__NameAssignment_1");
			builder.put(grammarAccess.getUpdateItemAccess().getPropertyAssignment_1(), "rule__UpdateItem__PropertyAssignment_1");
			builder.put(grammarAccess.getUpdateItemAccess().getValueAssignment_3(), "rule__UpdateItem__ValueAssignment_3");
			builder.put(grammarAccess.getConditionAccess().getExpressionAssignment_0(), "rule__Condition__ExpressionAssignment_0");
			builder.put(grammarAccess.getConditionAccess().getLogicOperatorAssignment_1_0(), "rule__Condition__LogicOperatorAssignment_1_0");
			builder.put(grammarAccess.getConditionAccess().getExpressionAssignment_1_1(), "rule__Condition__ExpressionAssignment_1_1");
			builder.put(grammarAccess.getComparisonAccess().getLeftHandSideAssignment_1(), "rule__Comparison__LeftHandSideAssignment_1");
			builder.put(grammarAccess.getComparisonAccess().getOperatorAssignment_2(), "rule__Comparison__OperatorAssignment_2");
			builder.put(grammarAccess.getComparisonAccess().getRightHandSideAssignment_3(), "rule__Comparison__RightHandSideAssignment_3");
			builder.put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
			builder.put(grammarAccess.getPropertyAccess().getNameAssignment_1(), "rule__Property__NameAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private NlToSqlGrammarAccess grammarAccess;

	@Override
	protected InternalNlToSqlParser createParser() {
		InternalNlToSqlParser result = new InternalNlToSqlParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public NlToSqlGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(NlToSqlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
